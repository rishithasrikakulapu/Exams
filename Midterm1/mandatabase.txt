
ls(STARTCOMMAND
LS(1)                            User Commands                           LS(1)



NAME
       ls - list directory contents

SYNOPSIS
       ls [OPTION]... [FILE]...

DESCRIPTION
       List  information  about  the FILEs (the current directory by default).
       Sort entries alphabetically if none of -cftuvSUX nor --sort  is  speci‐
       fied.

       Mandatory  arguments  to  long  options are mandatory for short options
       too.

       -a, --all
              do not ignore entries starting with .

       -A, --almost-all
              do not list implied . and ..

       --author
              with -l, print the author of each file

       -b, --escape
              print C-style escapes for nongraphic characters

       --block-size=SIZE
              scale sizes by SIZE before printing them; e.g., '--block-size=M'
              prints sizes in units of 1,048,576 bytes; see SIZE format below

       -B, --ignore-backups
              do not list implied entries ending with ~

       -c     with -lt: sort by, and show, ctime (time of last modification of
              file status information); with -l: show ctime and sort by  name;
              otherwise: sort by ctime, newest first

       -C     list entries by columns

       --color[=WHEN]
              colorize  the  output;  WHEN can be 'never', 'auto', or 'always'
              (the default); more info below

       -d, --directory
              list directories themselves, not their contents

       -D, --dired
              generate output designed for Emacs' dired mode

       -f     do not sort, enable -aU, disable -ls --color

       -F, --classify
              append indicator (one of */=>@|) to entries

       --file-type
              likewise, except do not append '*'

       --format=WORD
              across -x, commas -m, horizontal -x, long -l, single-column  -1,
              verbose -l, vertical -C

       --full-time
              like -l --time-style=full-iso

       -g     like -l, but do not list owner

       --group-directories-first
              group directories before files;

              can   be  augmented  with  a  --sort  option,  but  any  use  of
              --sort=none (-U) disables grouping

       -G, --no-group
              in a long listing, don't print group names

       -h, --human-readable
              with -l, print sizes in human readable format (e.g., 1K 234M 2G)

       --si   likewise, but use powers of 1000 not 1024

       -H, --dereference-command-line
              follow symbolic links listed on the command line

       --dereference-command-line-symlink-to-dir
              follow each command line symbolic link

              that points to a directory

       --hide=PATTERN
              do not list implied entries matching shell  PATTERN  (overridden
              by -a or -A)

       --indicator-style=WORD
              append indicator with style WORD to entry names: none (default),
              slash (-p), file-type (--file-type), classify (-F)

       -i, --inode
              print the index number of each file

       -I, --ignore=PATTERN
              do not list implied entries matching shell PATTERN

       -k, --kibibytes
              default to 1024-byte blocks for disk usage

       -l     use a long listing format

       -L, --dereference
              when showing file information for a symbolic link, show informa‐
              tion  for  the file the link references rather than for the link
              itself

       -m     fill width with a comma separated list of entries

       -n, --numeric-uid-gid
              like -l, but list numeric user and group IDs

       -N, --literal
              print raw entry names (don't treat e.g. control characters  spe‐
              cially)

       -o     like -l, but do not list group information

       -p, --indicator-style=slash
              append / indicator to directories

       -q, --hide-control-chars
              print ? instead of nongraphic characters

       --show-control-chars
              show nongraphic characters as-is (the default, unless program is
              'ls' and output is a terminal)

       -Q, --quote-name
              enclose entry names in double quotes

       --quoting-style=WORD
              use quoting style WORD for entry names: literal, locale,  shell,
              shell-always, c, escape

       -r, --reverse
              reverse order while sorting

       -R, --recursive
              list subdirectories recursively

       -s, --size
              print the allocated size of each file, in blocks

       -S     sort by file size

       --sort=WORD
              sort  by  WORD instead of name: none (-U), size (-S), time (-t),
              version (-v), extension (-X)

       --time=WORD
              with -l, show time as WORD instead of default modification time:
              atime or access or use (-u) ctime or status (-c); also use spec‐
              ified time as sort key if --sort=time

       --time-style=STYLE
              with -l, show times using style STYLE: full-iso, long-iso,  iso,
              locale,  or  +FORMAT;  FORMAT  is interpreted like in 'date'; if
              FORMAT  is  FORMAT1<newline>FORMAT2,  then  FORMAT1  applies  to
              non-recent  files  and FORMAT2 to recent files; if STYLE is pre‐
              fixed with 'posix-', STYLE takes effect only outside  the  POSIX
              locale

       -t     sort by modification time, newest first

       -T, --tabsize=COLS
              assume tab stops at each COLS instead of 8

       -u     with  -lt:  sort by, and show, access time; with -l: show access
              time and sort by name; otherwise: sort by access time

       -U     do not sort; list entries in directory order

       -v     natural sort of (version) numbers within text

       -w, --width=COLS
              assume screen width instead of current value

       -x     list entries by lines instead of by columns

       -X     sort alphabetically by entry extension

       -1     list one file per line

       SELinux options:

       --lcontext
              Display security context.   Enable -l. Lines  will  probably  be
              too wide for most displays.

       -Z, --context
              Display  security context so it fits on most displays.  Displays
              only mode, user, group, security context and file name.

       --scontext
              Display only security context and file name.

       --help display this help and exit

       --version
              output version information and exit

       SIZE is an integer and optional unit (example:  10M  is  10*1024*1024).
       Units  are K, M, G, T, P, E, Z, Y (powers of 1024) or KB, MB, ... (pow‐
       ers of 1000).

       Using color to distinguish file types is disabled both by  default  and
       with  --color=never.  With --color=auto, ls emits color codes only when
       standard output is connected to a terminal.  The LS_COLORS  environment
       variable can change the settings.  Use the dircolors command to set it.

   Exit status:
       0      if OK,

       1      if minor problems (e.g., cannot access subdirectory),

       2      if serious trouble (e.g., cannot access command-line argument).

       GNU  coreutils  online  help:  <http://www.gnu.org/software/coreutils/>
       Report ls translation bugs to <http://translationproject.org/team/>

AUTHOR
       Written by Richard M. Stallman and David MacKenzie.

COPYRIGHT
       Copyright © 2013 Free Software Foundation, Inc.   License  GPLv3+:  GNU
       GPL version 3 or later <http://gnu.org/licenses/gpl.html>.
       This  is  free  software:  you  are free to change and redistribute it.
       There is NO WARRANTY, to the extent permitted by law.

SEE ALSO
       The full documentation for ls is maintained as a  Texinfo  manual.   If
       the  info and ls programs are properly installed at your site, the com‐
       mand

              info coreutils 'ls invocation'

       should give you access to the complete manual.



GNU coreutils 8.22               November 2020                           LS(1)
ls(ENDCOMMAND
cp(STARTCOMMAND
CP(1)                            User Commands                           CP(1)



NAME
       cp - copy files and directories

SYNOPSIS
       cp [OPTION]... [-T] SOURCE DEST
       cp [OPTION]... SOURCE... DIRECTORY
       cp [OPTION]... -t DIRECTORY SOURCE...

DESCRIPTION
       Copy SOURCE to DEST, or multiple SOURCE(s) to DIRECTORY.

       Mandatory  arguments  to  long  options are mandatory for short options
       too.

       -a, --archive
              same as -dR --preserve=all

       --attributes-only
              don't copy the file data, just the attributes

       --backup[=CONTROL]
              make a backup of each existing destination file

       -b     like --backup but does not accept an argument

       --copy-contents
              copy contents of special files when recursive

       -d     same as --no-dereference --preserve=links

       -f, --force
              if an existing destination file cannot be opened, remove it  and
              try  again  (this  option  is ignored when the -n option is also
              used)

       -i, --interactive
              prompt before overwrite (overrides a previous -n option)

       -H     follow command-line symbolic links in SOURCE

       -l, --link
              hard link files instead of copying

       -L, --dereference
              always follow symbolic links in SOURCE

       -n, --no-clobber
              do not overwrite an  existing  file  (overrides  a  previous  -i
              option)

       -P, --no-dereference
              never follow symbolic links in SOURCE

       -p     same as --preserve=mode,ownership,timestamps

       --preserve[=ATTR_LIST]
              preserve the specified attributes (default: mode,ownership,time‐
              stamps), if  possible  additional  attributes:  context,  links,
              xattr, all

       -c     deprecated, same as --preserve=context

       --no-preserve=ATTR_LIST
              don't preserve the specified attributes

       --parents
              use full source file name under DIRECTORY

       -R, -r, --recursive
              copy directories recursively

       --reflink[=WHEN]
              control clone/CoW copies. See below

       --remove-destination
              remove  each existing destination file before attempting to open
              it (contrast with --force)

       --sparse=WHEN
              control creation of sparse files. See below

       --strip-trailing-slashes
              remove any trailing slashes from each SOURCE argument

       -s, --symbolic-link
              make symbolic links instead of copying

       -S, --suffix=SUFFIX
              override the usual backup suffix

       -t, --target-directory=DIRECTORY
              copy all SOURCE arguments into DIRECTORY

       -T, --no-target-directory
              treat DEST as a normal file

       -u, --update
              copy only when the SOURCE file is  newer  than  the  destination
              file or when the destination file is missing

       -v, --verbose
              explain what is being done

       -x, --one-file-system
              stay on this file system

       -Z     set SELinux security context of destination file to default type

       --context[=CTX]
              like  -Z,  or  if CTX is specified then set the SELinux or SMACK
              security context to CTX

       --help display this help and exit

       --version
              output version information and exit

       By default, sparse SOURCE files are detected by a crude  heuristic  and
       the corresponding DEST file is made sparse as well.  That is the behav‐
       ior selected by --sparse=auto.  Specify  --sparse=always  to  create  a
       sparse  DEST  file  whenever  the  SOURCE  file  contains a long enough
       sequence of zero bytes.  Use  --sparse=never  to  inhibit  creation  of
       sparse files.

       When --reflink[=always] is specified, perform a lightweight copy, where
       the data blocks are copied only when modified.  If this is not possible
       the copy fails, or if --reflink=auto is specified, fall back to a stan‐
       dard copy.

       The  backup  suffix  is  '~',  unless  set  with   --suffix   or   SIM‐
       PLE_BACKUP_SUFFIX.   The version control method may be selected via the
       --backup option or through the  VERSION_CONTROL  environment  variable.
       Here are the values:

       none, off
              never make backups (even if --backup is given)

       numbered, t
              make numbered backups

       existing, nil
              numbered if numbered backups exist, simple otherwise

       simple, never
              always make simple backups

       As  a  special  case,  cp  makes  a backup of SOURCE when the force and
       backup options are given and SOURCE and DEST are the same name  for  an
       existing, regular file.

       GNU  coreutils  online  help:  <http://www.gnu.org/software/coreutils/>
       Report cp translation bugs to <http://translationproject.org/team/>

AUTHOR
       Written by Torbjorn Granlund, David MacKenzie, and Jim Meyering.

COPYRIGHT
       Copyright © 2013 Free Software Foundation, Inc.   License  GPLv3+:  GNU
       GPL version 3 or later <http://gnu.org/licenses/gpl.html>.
       This  is  free  software:  you  are free to change and redistribute it.
       There is NO WARRANTY, to the extent permitted by law.

SEE ALSO
       The full documentation for cp is maintained as a  Texinfo  manual.   If
       the  info and cp programs are properly installed at your site, the com‐
       mand

              info coreutils 'cp invocation'

       should give you access to the complete manual.



GNU coreutils 8.22               November 2020                           CP(1)
cp(ENDCOMMAND
mv(STARTCOMMAND
MV(1)                            User Commands                           MV(1)



NAME
       mv - move (rename) files

SYNOPSIS
       mv [OPTION]... [-T] SOURCE DEST
       mv [OPTION]... SOURCE... DIRECTORY
       mv [OPTION]... -t DIRECTORY SOURCE...

DESCRIPTION
       Rename SOURCE to DEST, or move SOURCE(s) to DIRECTORY.

       Mandatory  arguments  to  long  options are mandatory for short options
       too.

       --backup[=CONTROL]
              make a backup of each existing destination file

       -b     like --backup but does not accept an argument

       -f, --force
              do not prompt before overwriting

       -i, --interactive
              prompt before overwrite

       -n, --no-clobber
              do not overwrite an existing file

       If you specify more than one of -i, -f, -n, only the  final  one  takes
       effect.

       --strip-trailing-slashes
              remove any trailing slashes from each SOURCE argument

       -S, --suffix=SUFFIX
              override the usual backup suffix

       -t, --target-directory=DIRECTORY
              move all SOURCE arguments into DIRECTORY

       -T, --no-target-directory
              treat DEST as a normal file

       -u, --update
              move  only  when  the  SOURCE file is newer than the destination
              file or when the destination file is missing

       -v, --verbose
              explain what is being done

       -Z, --context
              set SELinux security context of destination file to default type

       --help display this help and exit

       --version
              output version information and exit

       The  backup  suffix  is  '~',  unless  set  with   --suffix   or   SIM‐
       PLE_BACKUP_SUFFIX.   The version control method may be selected via the
       --backup option or through the  VERSION_CONTROL  environment  variable.
       Here are the values:

       none, off
              never make backups (even if --backup is given)

       numbered, t
              make numbered backups

       existing, nil
              numbered if numbered backups exist, simple otherwise

       simple, never
              always make simple backups

       GNU  coreutils  online  help:  <http://www.gnu.org/software/coreutils/>
       Report mv translation bugs to <http://translationproject.org/team/>

AUTHOR
       Written by Mike Parker, David MacKenzie, and Jim Meyering.

COPYRIGHT
       Copyright © 2013 Free Software Foundation, Inc.   License  GPLv3+:  GNU
       GPL version 3 or later <http://gnu.org/licenses/gpl.html>.
       This  is  free  software:  you  are free to change and redistribute it.
       There is NO WARRANTY, to the extent permitted by law.

SEE ALSO
       rename(2)

       The full documentation for mv is maintained as a  Texinfo  manual.   If
       the  info and mv programs are properly installed at your site, the com‐
       mand

              info coreutils 'mv invocation'

       should give you access to the complete manual.



GNU coreutils 8.22               November 2020                           MV(1)
mv(ENDCOMMAND
rm(STARTCOMMAND
RM(1)                            User Commands                           RM(1)



NAME
       rm - remove files or directories

SYNOPSIS
       rm [OPTION]... FILE...

DESCRIPTION
       This  manual  page  documents  the  GNU version of rm.  rm removes each
       specified file.  By default, it does not remove directories.

       If the -I or --interactive=once option is given,  and  there  are  more
       than  three  files  or  the  -r,  -R, or --recursive are given, then rm
       prompts the user for whether to proceed with the entire operation.   If
       the response is not affirmative, the entire command is aborted.

       Otherwise,  if  a file is unwritable, standard input is a terminal, and
       the -f or --force  option  is  not  given,  or  the  -i  or  --interac‐
       tive=always  option is given, rm prompts the user for whether to remove
       the file.  If the response is not affirmative, the file is skipped.

OPTIONS
       Remove (unlink) the FILE(s).

       -f, --force
              ignore nonexistent files and arguments, never prompt

       -i     prompt before every removal

       -I     prompt once before removing  more  than  three  files,  or  when
              removing recursively; less intrusive than -i, while still giving
              protection against most mistakes

       --interactive[=WHEN]
              prompt according to WHEN: never,  once  (-I),  or  always  (-i);
              without WHEN, prompt always

       --one-file-system
              when  removing  a hierarchy recursively, skip any directory that
              is on a file system different from  that  of  the  corresponding
              command line argument

       --no-preserve-root
              do not treat '/' specially

       --preserve-root
              do not remove '/' (default)

       -r, -R, --recursive
              remove directories and their contents recursively

       -d, --dir
              remove empty directories

       -v, --verbose
              explain what is being done

       --help display this help and exit

       --version
              output version information and exit

       By default, rm does not remove directories.  Use the --recursive (-r or
       -R) option to remove each listed directory, too, along with all of  its
       contents.

       To  remove a file whose name starts with a '-', for example '-foo', use
       one of these commands:

              rm -- -foo

              rm ./-foo

       Note that if you use rm to remove a  file,  it  might  be  possible  to
       recover  some  of its contents, given sufficient expertise and/or time.
       For greater assurance that the contents are truly  unrecoverable,  con‐
       sider using shred.

       GNU  coreutils  online  help:  <http://www.gnu.org/software/coreutils/>
       Report rm translation bugs to <http://translationproject.org/team/>

AUTHOR
       Written by Paul Rubin, David MacKenzie, Richard M.  Stallman,  and  Jim
       Meyering.

COPYRIGHT
       Copyright  ©  2013  Free Software Foundation, Inc.  License GPLv3+: GNU
       GPL version 3 or later <http://gnu.org/licenses/gpl.html>.
       This is free software: you are free  to  change  and  redistribute  it.
       There is NO WARRANTY, to the extent permitted by law.

SEE ALSO
       unlink(1), unlink(2), chattr(1), shred(1)

       The  full  documentation  for rm is maintained as a Texinfo manual.  If
       the info and rm programs are properly installed at your site, the  com‐
       mand

              info coreutils 'rm invocation'

       should give you access to the complete manual.



GNU coreutils 8.22               November 2020                           RM(1)
rm(ENDCOMMAND
gzip(STARTCOMMAND
GZIP(1)                     General Commands Manual                    GZIP(1)



NAME
       gzip, gunzip, zcat - compress or expand files

SYNOPSIS
       gzip [ -acdfhlLnNrtvV19 ] [-S suffix] [ name ...  ]
       gunzip [ -acfhlLnNrtvV ] [-S suffix] [ name ...  ]
       zcat [ -fhLV ] [ name ...  ]

DESCRIPTION
       Gzip  reduces  the  size  of  the  named  files using Lempel-Ziv coding
       (LZ77).  Whenever possible, each file  is  replaced  by  one  with  the
       extension .gz, while keeping the same ownership modes, access and modi‐
       fication times.  (The default extension is -gz for VMS,  z  for  MSDOS,
       OS/2  FAT, Windows NT FAT and Atari.)  If no files are specified, or if
       a file name is "-", the standard input is compressed  to  the  standard
       output.  Gzip will only attempt to compress regular files.  In particu‐
       lar, it will ignore symbolic links.

       If the compressed file name is too long for its file system, gzip trun‐
       cates  it.   Gzip  attempts to truncate only the parts of the file name
       longer than 3 characters.  (A part is delimited by dots.) If  the  name
       consists  of  small  parts  only,  the longest parts are truncated. For
       example, if file names are limited to 14 characters, gzip.msdos.exe  is
       compressed to gzi.msd.exe.gz.  Names are not truncated on systems which
       do not have a limit on file name length.

       By default, gzip keeps the original file name and timestamp in the com‐
       pressed  file.  These  are used when decompressing the file with the -N
       option. This is useful when the compressed file name was  truncated  or
       when the time stamp was not preserved after a file transfer.

       Compressed  files  can be restored to their original form using gzip -d
       or gunzip or zcat.  If the original name saved in the  compressed  file
       is not suitable for its file system, a new name is constructed from the
       original one to make it legal.

       gunzip takes a list of files on its command line and replaces each file
       whose  name ends with .gz, -gz, .z, -z, or _z (ignoring case) and which
       begins with the correct magic number with an uncompressed file  without
       the  original extension.  gunzip also recognizes the special extensions
       .tgz and .taz as shorthands for .tar.gz and .tar.Z respectively.   When
       compressing, gzip uses the .tgz extension if necessary instead of trun‐
       cating a file with a .tar extension.

       gunzip can currently decompress files created by gzip,  zip,  compress,
       compress  -H  or pack.  The detection of the input format is automatic.
       When using the first two formats, gunzip checks a 32 bit CRC. For pack,
       gunzip checks the uncompressed length. The standard compress format was
       not designed to allow consistency checks. However gunzip  is  sometimes
       able  to detect a bad .Z file. If you get an error when uncompressing a
       .Z file, do not assume that the .Z file is correct simply  because  the
       standard  uncompress  does  not complain. This generally means that the
       standard uncompress does not check its  input,  and  happily  generates
       garbage  output.   The  SCO compress -H format (lzh compression method)
       does not include a CRC but also allows some consistency checks.

       Files created by zip can be uncompressed by gzip only if  they  have  a
       single  member  compressed with the 'deflation' method. This feature is
       only intended to help conversion of tar.zip files to the tar.gz format.
       To  extract  a zip file with a single member, use a command like gunzip
       <foo.zip or gunzip -S .zip foo.zip.  To extract zip files with  several
       members, use unzip instead of gunzip.

       zcat  is  identical  to  gunzip  -c.   (On  some  systems,  zcat may be
       installed as gzcat to preserve the original link  to  compress.)   zcat
       uncompresses either a list of files on the command line or its standard
       input and writes the uncompressed data on standard output.   zcat  will
       uncompress files that have the correct magic number whether they have a
       .gz suffix or not.

       Gzip uses the Lempel-Ziv algorithm used in zip and PKZIP.   The  amount
       of  compression  obtained depends on the size of the input and the dis‐
       tribution of common substrings.  Typically, text such as source code or
       English  is  reduced  by  60-70%.  Compression is generally much better
       than that achieved by LZW (as used in  compress),  Huffman  coding  (as
       used in pack), or adaptive Huffman coding (compact).

       Compression  is  always  performed,  even  if  the  compressed  file is
       slightly larger than the original. The worst case expansion  is  a  few
       bytes  for  the  gzip  file header, plus 5 bytes every 32K block, or an
       expansion ratio of 0.015% for large files. Note that the actual  number
       of  used  disk blocks almost never increases.  gzip preserves the mode,
       ownership and timestamps of files when compressing or decompressing.

       The gzip file format is specified in P. Deutsch, GZIP file format spec‐
       ification version 4.3, <ftp://ftp.isi.edu/in-notes/rfc1952.txt>, Inter‐
       net RFC 1952 (May 1996).  The zip deflation format is specified  in  P.
       Deutsch,  DEFLATE  Compressed  Data  Format  Specification version 1.3,
       <ftp://ftp.isi.edu/in-notes/rfc1951.txt>, Internet RFC 1951 (May 1996).


OPTIONS
       -a --ascii
              Ascii text mode: convert end-of-lines using  local  conventions.
              This  option  is  supported  only  on some non-Unix systems. For
              MSDOS, CR LF is converted to LF when compressing, and LF is con‐
              verted to CR LF when decompressing.

       -c --stdout --to-stdout
              Write  output on standard output; keep original files unchanged.
              If there are several input  files,  the  output  consists  of  a
              sequence  of  independently compressed members. To obtain better
              compression, concatenate  all  input  files  before  compressing
              them.

       -d --decompress --uncompress
              Decompress.

       -f --force
              Force compression or decompression even if the file has multiple
              links or the corresponding file already exists, or if  the  com‐
              pressed data is read from or written to a terminal. If the input
              data is not in a format recognized by gzip, and  if  the  option
              --stdout  is  also  given, copy the input data without change to
              the standard output: let zcat behave  as  cat.   If  -f  is  not
              given,  and  when not running in the background, gzip prompts to
              verify whether an existing file should be overwritten.

       -h --help
              Display a help screen and quit.

       -l --list
              For each compressed file, list the following fields:

                  compressed size: size of the compressed file
                  uncompressed size: size of the uncompressed file
                  ratio: compression ratio (0.0% if unknown)
                  uncompressed_name: name of the uncompressed file

              The uncompressed size is given as -1 for files not in gzip  for‐
              mat,  such  as compressed .Z files. To get the uncompressed size
              for such a file, you can use:

                  zcat file.Z | wc -c

              In combination with the --verbose option, the  following  fields
              are also displayed:

                  method: compression method
                  crc: the 32-bit CRC of the uncompressed data
                  date & time: time stamp for the uncompressed file

              The  compression  methods  currently supported are deflate, com‐
              press, lzh (SCO compress -H) and pack.   The  crc  is  given  as
              ffffffff for a file not in gzip format.

              With  --name,  the  uncompressed name,  date and time  are those
              stored within the compress file if present.

              With --verbose, the size totals and compression  ratio  for  all
              files  is  also  displayed,  unless some sizes are unknown. With
              --quiet, the title and totals lines are not displayed.

       -L --license
              Display the gzip license and quit.

       -n --no-name
              When compressing, do not save the original file  name  and  time
              stamp by default. (The original name is always saved if the name
              had to be truncated.) When decompressing,  do  not  restore  the
              original  file name if present (remove only the gzip suffix from
              the compressed file name) and do not restore the  original  time
              stamp if present (copy it from the compressed file). This option
              is the default when decompressing.

       -N --name
              When compressing, always save the original file  name  and  time
              stamp;  this  is  the  default.  When decompressing, restore the
              original file name and time stamp if  present.  This  option  is
              useful on systems which have a limit on file name length or when
              the time stamp has been lost after a file transfer.

       -q --quiet
              Suppress all warnings.

       -r --recursive
              Travel the directory structure recursively. If any of  the  file
              names  specified  on the command line are directories, gzip will
              descend into the directory and compress all the files  it  finds
              there (or decompress them in the case of gunzip ).

       -S .suf --suffix .suf
              When compressing, use suffix .suf instead of .gz.  Any non-empty
              suffix can be given, but suffixes other than .z and  .gz  should
              be  avoided  to  avoid  confusion  when files are transferred to
              other systems.

              When decompressing, add .suf to the beginning  of  the  list  of
              suffixes to try, when deriving an output file name from an input
              file name.

              pack(1).

       -t --test
              Test. Check the compressed file integrity.

       -v --verbose
              Verbose. Display the name and percentage reduction for each file
              compressed or decompressed.

       -V --version
              Version. Display the version number and compilation options then
              quit.

       -# --fast --best
              Regulate the speed of compression using the specified  digit  #,
              where  -1  or  --fast  indicates  the fastest compression method
              (less compression) and -9 or --best indicates the  slowest  com‐
              pression  method  (best  compression).   The default compression
              level is -6 (that is, biased towards high compression at expense
              of speed).

ADVANCED USAGE
       Multiple  compressed  files  can  be concatenated. In this case, gunzip
       will extract all members at once. For example:

             gzip -c file1  > foo.gz
             gzip -c file2 >> foo.gz

       Then

             gunzip -c foo

       is equivalent to

             cat file1 file2

       In case of damage to one member of a .gz file, other members can  still
       be  recovered  (if the damaged member is removed). However, you can get
       better compression by compressing all members at once:

             cat file1 file2 | gzip > foo.gz

       compresses better than

             gzip -c file1 file2 > foo.gz

       If you want to recompress concatenated files to get better compression,
       do:

             gzip -cd old.gz | gzip > new.gz

       If a compressed file consists of several members, the uncompressed size
       and CRC reported by the --list option applies to the last member  only.
       If you need the uncompressed size for all members, you can use:

             gzip -cd file.gz | wc -c

       If  you  wish  to create a single archive file with multiple members so
       that members can later be extracted independently, use an archiver such
       as  tar or zip. GNU tar supports the -z option to invoke gzip transpar‐
       ently. gzip is designed as a complement to tar, not as a replacement.

ENVIRONMENT
       The environment variable GZIP can hold a set  of  default  options  for
       gzip.   These  options  are interpreted first and can be overwritten by
       explicit command line parameters. For example:
             for sh:    GZIP="-8v --name"; export GZIP
             for csh:   setenv GZIP "-8v --name"
             for MSDOS: set GZIP=-8v --name

       On Vax/VMS, the name of the environment variable is GZIP_OPT, to  avoid
       a conflict with the symbol set for invocation of the program.

SEE ALSO
       znew(1), zcmp(1), zmore(1), zforce(1), gzexe(1), zip(1), unzip(1), com‐
       press(1), pack(1), compact(1)

       The gzip file format is specified in P. Deutsch, GZIP file format spec‐
       ification version 4.3, <ftp://ftp.isi.edu/in-notes/rfc1952.txt>, Inter‐
       net RFC 1952 (May 1996).  The zip deflation format is specified  in  P.
       Deutsch,  DEFLATE  Compressed  Data  Format  Specification version 1.3,
       <ftp://ftp.isi.edu/in-notes/rfc1951.txt>, Internet RFC 1951 (May 1996).

DIAGNOSTICS
       Exit status is normally 0; if an error occurs, exit status is 1.  If  a
       warning occurs, exit status is 2.

       Usage: gzip [-cdfhlLnNrtvV19] [-S suffix] [file ...]
              Invalid options were specified on the command line.

       file: not in gzip format
              The file specified to gunzip has not been compressed.

       file: Corrupt input. Use zcat to recover some data.
              The  compressed  file has been damaged. The data up to the point
              of failure can be recovered using

                    zcat file > recover

       file: compressed with xx bits, can only handle yy bits
              File was compressed (using LZW) by a  program  that  could  deal
              with more bits than the decompress code on this machine.  Recom‐
              press the file with gzip, which compresses better and uses  less
              memory.

       file: already has .gz suffix -- no change
              The  file  is assumed to be already compressed.  Rename the file
              and try again.

       file already exists; do you wish to overwrite (y or n)?
              Respond "y" if you want the output file to be replaced;  "n"  if
              not.

       gunzip: corrupt input
              A  SIGSEGV  violation  was detected which usually means that the
              input file has been corrupted.

       xx.x% Percentage of the input saved by compression.
              (Relevant only for -v and -l.)

       -- not a regular file or directory: ignored
              When the input file is not a regular file or directory, (e.g.  a
              symbolic link, socket, FIFO, device file), it is left unaltered.

       -- has xx other links: unchanged
              The  input  file has links; it is left unchanged.  See ln(1) for
              more information. Use the -f flag to force compression of multi‐
              ply-linked files.

CAVEATS
       When  writing  compressed  data to a tape, it is generally necessary to
       pad the output with zeroes up to a block boundary.  When  the  data  is
       read  and the whole block is passed to gunzip for decompression, gunzip
       detects that there is extra trailing garbage after the compressed  data
       and  emits  a warning by default. You have to use the --quiet option to
       suppress the warning. This option can be set in  the  GZIP  environment
       variable as in:
         for sh:  GZIP="-q"  tar -xfz --block-compress /dev/rst0
         for csh: (setenv GZIP -q; tar -xfz --block-compr /dev/rst0

       In  the  above  example, gzip is invoked implicitly by the -z option of
       GNU tar. Make sure that the same block size (-b option of tar) is  used
       for  reading  and  writing  compressed  data  on  tapes.  (This example
       assumes you are using the GNU version of tar.)

BUGS
       The gzip format represents the input size modulo 2^32,  so  the  --list
       option  reports incorrect uncompressed sizes and compression ratios for
       uncompressed files 4 GB and larger.  To work around this  problem,  you
       can  use  the following command to discover a large uncompressed file's
       true size:

             zcat file.gz | wc -c

       The --list option reports sizes as -1 and crc as ffffffff if  the  com‐
       pressed file is on a non seekable media.

       In  some rare cases, the --best option gives worse compression than the
       default compression level (-6). On some highly  redundant  files,  com‐
       press compresses better than gzip.

COPYRIGHT NOTICE
       Copyright © 1998, 1999, 2001, 2002 Free Software Foundation, Inc.
       Copyright © 1992, 1993 Jean-loup Gailly

       Permission  is  granted  to make and distribute verbatim copies of this
       manual provided the copyright notice and  this  permission  notice  are
       preserved on all copies.

       Permission  is granted to copy and distribute modified versions of this
       manual under the conditions for verbatim  copying,  provided  that  the
       entire  resulting derived work is distributed under the terms of a per‐
       mission notice identical to this one.

       Permission is granted to copy and distribute translations of this  man‐
       ual into another language, under the above conditions for modified ver‐
       sions, except that this permission notice may be stated in  a  transla‐
       tion approved by the Foundation.



                                     local                             GZIP(1)
gzip(ENDCOMMAND
sed(STARTCOMMAND
SED(1)                           User Commands                          SED(1)



NAME
       sed - stream editor for filtering and transforming text

SYNOPSIS
       sed [OPTION]... {script-only-if-no-other-script} [input-file]...

DESCRIPTION
       Sed  is a stream editor.  A stream editor is used to perform basic text
       transformations on an input stream (a file or input from  a  pipeline).
       While  in  some  ways similar to an editor which permits scripted edits
       (such as ed), sed works by making only one pass over the input(s),  and
       is consequently more efficient.  But it is sed's ability to filter text
       in a pipeline which particularly distinguishes it from other  types  of
       editors.

       -n, --quiet, --silent

              suppress automatic printing of pattern space

       -e script, --expression=script

              add the script to the commands to be executed

       -f script-file, --file=script-file

              add the contents of script-file to the commands to be executed

       --follow-symlinks

              follow symlinks when processing in place

       -i[SUFFIX], --in-place[=SUFFIX]

              edit files in place (makes backup if SUFFIX supplied)

       -c, --copy

              use copy instead of rename when shuffling files in -i mode

       -b, --binary

              does  nothing;  for  compatibility with WIN32/CYGWIN/MSDOS/EMX (
              open files in binary mode (CR+LFs are not treated specially))

       -l N, --line-length=N

              specify the desired line-wrap length for the `l' command

       --posix

              disable all GNU extensions.

       -r, --regexp-extended

              use extended regular expressions in the script.

       -s, --separate

              consider files as separate rather than as  a  single  continuous
              long stream.

       -u, --unbuffered

              load  minimal amounts of data from the input files and flush the
              output buffers more often

       -z, --null-data

              separate lines by NUL characters

       --help

              display this help and exit

       --version

              output version information and exit

       If no -e, --expression, -f, or --file option is given, then  the  first
       non-option  argument  is  taken  as  the  sed script to interpret.  All
       remaining arguments are names of input files; if  no  input  files  are
       specified, then the standard input is read.

       GNU  sed  home  page: <http://www.gnu.org/software/sed/>.  General help
       using GNU software: <http://www.gnu.org/gethelp/>.  E-mail bug  reports
       to:  <bug-sed@gnu.org>.   Be sure to include the word ``sed'' somewhere
       in the ``Subject:'' field.

COMMAND SYNOPSIS
       This is just a brief synopsis of sed commands to serve as a reminder to
       those  who  already  know sed; other documentation (such as the texinfo
       document) must be consulted for fuller descriptions.

   Zero-address ``commands''
       : label
              Label for b and t commands.

       #comment
              The comment extends until the next newline (or the end of  a  -e
              script fragment).

       }      The closing bracket of a { } block.

   Zero- or One- address commands
       =      Print the current line number.

       a \

       text   Append text, which has each embedded newline preceded by a back‐
              slash.

       i \

       text   Insert text, which has each embedded newline preceded by a back‐
              slash.

       q [exit-code]
              Immediately  quit  the  sed  script  without processing any more
              input, except that if auto-print is  not  disabled  the  current
              pattern  space will be printed.  The exit code argument is a GNU
              extension.

       Q [exit-code]
              Immediately quit the sed  script  without  processing  any  more
              input.  This is a GNU extension.

       r filename
              Append text read from filename.

       R filename
              Append  a  line read from filename.  Each invocation of the com‐
              mand reads a line from the file.  This is a GNU extension.

   Commands which accept address ranges
       {      Begin a block of commands (end with a }).

       b label
              Branch to label; if label is omitted, branch to end of script.

       c \

       text   Replace the selected lines with text, which  has  each  embedded
              newline preceded by a backslash.

       d      Delete pattern space.  Start next cycle.

       D      If  pattern  space contains no newline, start a normal new cycle
              as if the d command was issued.  Otherwise, delete text  in  the
              pattern  space  up  to the first newline, and restart cycle with
              the resultant pattern space,  without  reading  a  new  line  of
              input.

       h H    Copy/append pattern space to hold space.

       g G    Copy/append hold space to pattern space.

       l      List out the current line in a ``visually unambiguous'' form.

       l width
              List  out  the  current line in a ``visually unambiguous'' form,
              breaking it at width characters.  This is a GNU extension.

       n N    Read/append the next line of input into the pattern space.

       p      Print the current pattern space.

       P      Print up to the first embedded newline of  the  current  pattern
              space.

       s/regexp/replacement/
              Attempt  to match regexp against the pattern space.  If success‐
              ful,  replace  that  portion  matched  with  replacement.    The
              replacement may contain the special character & to refer to that
              portion of the pattern space  which  matched,  and  the  special
              escapes  \1  through  \9  to refer to the corresponding matching
              sub-expressions in the regexp.

       t label
              If a s/// has done a  successful  substitution  since  the  last
              input  line  was  read  and  since the last t or T command, then
              branch to label; if label is omitted, branch to end of script.

       T label
              If no s/// has done a successful  substitution  since  the  last
              input  line  was  read  and  since the last t or T command, then
              branch to label; if label is omitted, branch to end  of  script.
              This is a GNU extension.

       w filename
              Write the current pattern space to filename.

       W filename
              Write  the  first line of the current pattern space to filename.
              This is a GNU extension.

       x      Exchange the contents of the hold and pattern spaces.

       y/source/dest/
              Transliterate the characters in the pattern space  which  appear
              in source to the corresponding character in dest.

Addresses
       Sed  commands can be given with no addresses, in which case the command
       will be executed for all input lines; with one address, in  which  case
       the  command  will  only  be  executed for input lines which match that
       address; or with two addresses, in which case the command will be  exe‐
       cuted  for  all  input  lines  which match the inclusive range of lines
       starting from the first address and continuing to the  second  address.
       Three  things  to  note about address ranges: the syntax is addr1,addr2
       (i.e., the addresses are separated by a comma); the  line  which  addr1
       matched will always be accepted, even if addr2 selects an earlier line;
       and if addr2 is a regexp, it will not be tested against the  line  that
       addr1 matched.

       After  the address (or address-range), and before the command, a !  may
       be inserted, which specifies that the command shall only be executed if
       the address (or address-range) does not match.

       The following address types are supported:

       number Match  only  the specified line number (which increments cumula‐
              tively across files, unless the -s option is  specified  on  the
              command line).

       first~step
              Match every step'th line starting with line first.  For example,
              ``sed -n 1~2p'' will print all the  odd-numbered  lines  in  the
              input  stream,  and the address 2~5 will match every fifth line,
              starting with the second.  first can be zero; in this case,  sed
              operates as if it were equal to step.  (This is an extension.)

       $      Match the last line.

       /regexp/
              Match lines matching the regular expression regexp.

       \cregexpc
              Match  lines  matching the regular expression regexp.  The c may
              be any character.

       GNU sed also supports some special 2-address forms:

       0,addr2
              Start out in "matched  first  address"  state,  until  addr2  is
              found.  This is similar to 1,addr2, except that if addr2 matches
              the very first line of input the 0,addr2 form will be at the end
              of  its  range,  whereas  the  1,addr2 form will still be at the
              beginning of its range.  This works only when addr2 is a regular
              expression.

       addr1,+N
              Will match addr1 and the N lines following addr1.

       addr1,~N
              Will  match  addr1  and the lines following addr1 until the next
              line whose input line number is a multiple of N.

REGULAR EXPRESSIONS
       POSIX.2 BREs should be supported, but they aren't completely because of
       performance  problems.  The \n sequence in a regular expression matches
       the newline character, and similarly for \a, \t, and other sequences.

BUGS
       E-mail bug reports to bug-sed@gnu.org.  Also, please include the output
       of ``sed --version'' in the body of your report if at all possible.

AUTHOR
       Written by Jay Fenlason, Tom Lord, Ken Pizzini, and Paolo Bonzini.  GNU
       sed home page: <http://www.gnu.org/software/sed/>.  General help  using
       GNU  software:  <http://www.gnu.org/gethelp/>.   E-mail bug reports to:
       <bug-sed@gnu.org>.  Be sure to include the word  ``sed''  somewhere  in
       the ``Subject:'' field.

COPYRIGHT
       Copyright  ©  2012  Free Software Foundation, Inc.  License GPLv3+: GNU
       GPL version 3 or later <http://gnu.org/licenses/gpl.html>.
       This is free software: you are free  to  change  and  redistribute  it.
       There is NO WARRANTY, to the extent permitted by law.

SEE ALSO
       awk(1),  ed(1),  grep(1),  tr(1),  perlre(1),  sed.info, any of various
       books on sed, the sed FAQ (http://sed.sf.net/grabbag/tutorials/sed‐
       faq.txt), http://sed.sf.net/grabbag/.

       The full documentation for sed is maintained as a Texinfo manual.  If
       the info and sed programs are properly installed at your site, the com‐
       mand

              info sed

       should give you access to the complete manual.



sed 4.2.2                       September 2020                          SED(1)
sed(ENDCOMMAND
awk(STARTCOMMAND
GAWK(1)                        Utility Commands                        GAWK(1)



NAME
       gawk - pattern scanning and processing language

SYNOPSIS
       gawk [ POSIX or GNU style options ] -f program-file [ -- ] file ...
       gawk [ POSIX or GNU style options ] [ -- ] program-text file ...

       pgawk [ POSIX or GNU style options ] -f program-file [ -- ] file ...
       pgawk [ POSIX or GNU style options ] [ -- ] program-text file ...

       dgawk [ POSIX or GNU style options ] -f program-file [ -- ] file ...

DESCRIPTION
       Gawk  is  the  GNU Project's implementation of the AWK programming lan‐
       guage.  It conforms to the definition of  the  language  in  the  POSIX
       1003.1  Standard.   This version in turn is based on the description in
       The AWK Programming Language, by Aho, Kernighan, and Weinberger.   Gawk
       provides  the  additional features found in the current version of UNIX
       awk and a number of GNU-specific extensions.

       The command line consists of options to gawk itself,  the  AWK  program
       text  (if  not supplied via the -f or --file options), and values to be
       made available in the ARGC and ARGV pre-defined AWK variables.

       Pgawk is the profiling version of gawk.  It is identical in  every  way
       to  gawk,  except  that  programs run more slowly, and it automatically
       produces an execution profile in the file awkprof.out when  done.   See
       the --profile option, below.

       Dgawk  is  an awk debugger. Instead of running the program directly, it
       loads the AWK source code and  then  prompts  for  debugging  commands.
       Unlike gawk and pgawk, dgawk only processes AWK program source provided
       with the -f option.  The debugger is documented in GAWK: Effective  AWK
       Programming.

OPTION FORMAT
       Gawk  options may be either traditional POSIX-style one letter options,
       or GNU-style long options.  POSIX options  start  with  a  single  “-”,
       while long options start with “--”.  Long options are provided for both
       GNU-specific features and for POSIX-mandated features.

       Gawk- specific options are typically used in long-option  form.   Argu‐
       ments  to  long options are either joined with the option by an = sign,
       with no intervening spaces, or they may be provided in the next command
       line  argument.  Long options may be abbreviated, as long as the abbre‐
       viation remains unique.

       Additionally, each long option has a  corresponding  short  option,  so
       that  the option's functionality may be used from within #!  executable
       scripts.

OPTIONS
       Gawk accepts the following options.  Standard options are listed first,
       followed by options for gawk extensions, listed alphabetically by short
       option.

       -f program-file
       --file program-file
              Read the AWK program source from the file program-file,  instead
              of  from  the  first  command  line  argument.   Multiple -f (or
              --file) options may be used.

       -F fs
       --field-separator fs
              Use fs for the input field separator (the value of the FS prede‐
              fined variable).

       -v var=val
       --assign var=val
              Assign  the  value  val to the variable var, before execution of
              the program begins.  Such variable values are available  to  the
              BEGIN block of an AWK program.

       -b
       --characters-as-bytes
              Treat  all input data as single-byte characters. In other words,
              don't pay any attention to the locale information when  attempt‐
              ing  to  process  strings  as multibyte characters.  The --posix
              option overrides this one.

       -c
       --traditional
              Run in compatibility mode.  In compatibility mode, gawk  behaves
              identically to UNIX awk; none of the GNU-specific extensions are
              recognized.  See GNU EXTENSIONS, below, for more information.

       -C
       --copyright
              Print the short version of the GNU copyright information message
              on the standard output and exit successfully.

       -d[file]
       --dump-variables[=file]
              Print  a  sorted list of global variables, their types and final
              values to file.  If no file is provided, gawk uses a file  named
              awkvars.out in the current directory.
              Having  a list of all the global variables is a good way to look
              for typographical errors in your programs.  You would  also  use
              this option if you have a large program with a lot of functions,
              and you want to be sure that your functions don't  inadvertently
              use  global  variables  that  you meant to be local.  (This is a
              particularly easy mistake to make  with  simple  variable  names
              like i, j, and so on.)

       -e program-text
       --source program-text
              Use program-text as AWK program source code.  This option allows
              the easy intermixing of library functions (used via the  -f  and
              --file  options)  with  source code entered on the command line.
              It is intended primarily for medium to large AWK  programs  used
              in shell scripts.

       -E file
       --exec file
              Similar  to  -f,  however,  this  is option is the last one pro‐
              cessed.  This should be used with #!  scripts, particularly  for
              CGI applications, to avoid passing in options or source code (!)
              on the command line from a URL.  This option  disables  command-
              line variable assignments.

       -g
       --gen-pot
              Scan  and parse the AWK program, and generate a GNU .pot (Porta‐
              ble Object Template) format file on standard output with entries
              for  all localizable strings in the program.  The program itself
              is not executed.  See the  GNU  gettext  distribution  for  more
              information on .pot files.

       -h
       --help Print a relatively short summary of the available options on the
              standard output.  (Per the GNU Coding Standards,  these  options
              cause an immediate, successful exit.)

       -L [value]
       --lint[=value]
              Provide warnings about constructs that are dubious or non-porta‐
              ble to other AWK implementations.  With an optional argument  of
              fatal,  lint warnings become fatal errors.  This may be drastic,
              but its use will certainly encourage the development of  cleaner
              AWK  programs.  With an optional argument of invalid, only warn‐
              ings about things that are actually invalid are issued. (This is
              not fully implemented yet.)

       -n
       --non-decimal-data
              Recognize  octal and hexadecimal values in input data.  Use this
              option with great caution!

       -N
       --use-lc-numeric
              This forces gawk to use the  locale's  decimal  point  character
              when  parsing  input data.  Although the POSIX standard requires
              this behavior, and gawk does so when --posix is in  effect,  the
              default  is  to  follow traditional behavior and use a period as
              the decimal point, even in locales where the period is  not  the
              decimal  point  character.   This  option  overrides the default
              behavior, without the full draconian strictness of  the  --posix
              option.

       -O
       --optimize
              Enable  optimizations  upon  the  internal representation of the
              program.  Currently, this includes just simple constant-folding.
              The  gawk  maintainer hopes to add additional optimizations over
              time.

       -p[prof_file]
       --profile[=prof_file]
              Send profiling data to prof_file.  The default  is  awkprof.out.
              When  run with gawk, the profile is just a “pretty printed” ver‐
              sion of the program.  When run with pgawk, the profile  contains
              execution  counts  of  each statement in the program in the left
              margin and function call counts for each user-defined function.

       -P
       --posix
              This turns on compatibility mode, with the following  additional
              restrictions:

              · \x escape sequences are not recognized.

              · Only space and tab act as field separators when FS is set to a
                single space, newline does not.

              · You cannot continue lines after ?  and :.

              · The synonym func for the keyword function is not recognized.

              · The operators ** and **= cannot be used in place of ^ and ^=.

       -r
       --re-interval
              Enable the use of interval  expressions  in  regular  expression
              matching (see Regular Expressions, below).  Interval expressions
              were not traditionally available in the AWK language.  The POSIX
              standard  added them, to make awk and egrep consistent with each
              other.  They are enabled by default, but this option remains for
              use with --traditional.

       -R
       --command file
              Dgawk only.  Read stored debugger commands from file.

       -S
       --sandbox
              Runs  gawk  in  sandbox  mode,  disabling the system() function,
              input redirection with getline, output  redirection  with  print
              and  printf,  and loading dynamic extensions.  Command execution
              (through pipelines) is also disabled.  This effectively blocks a
              script  from  accessing  local  resources  (except for the files
              specified on the command line).

       -t
       --lint-old
              Provide warnings about constructs that are not portable  to  the
              original version of Unix awk.

       -V
       --version
              Print  version  information  for this particular copy of gawk on
              the standard output.  This is useful mainly for knowing  if  the
              current  copy  of gawk on your system is up to date with respect
              to whatever the Free Software Foundation is distributing.   This
              is  also  useful when reporting bugs.  (Per the GNU Coding Stan‐
              dards, these options cause an immediate, successful exit.)

       --     Signal the end of options. This is useful to allow further argu‐
              ments  to the AWK program itself to start with a “-”.  This pro‐
              vides consistency with the argument parsing convention  used  by
              most other POSIX programs.

       In  compatibility  mode,  any other options are flagged as invalid, but
       are otherwise ignored.  In normal operation, as long  as  program  text
       has  been supplied, unknown options are passed on to the AWK program in
       the ARGV array for processing.  This is particularly useful for running
       AWK programs via the “#!” executable interpreter mechanism.

AWK PROGRAM EXECUTION
       An  AWK program consists of a sequence of pattern-action statements and
       optional function definitions.

              @include "filename" pattern   { action statements }
              function name(parameter list) { statements }

       Gawk first reads the program source from the program-file(s) if  speci‐
       fied, from arguments to --source, or from the first non-option argument
       on the command line.  The -f and --source options may be used  multiple
       times  on  the command line.  Gawk reads the program text as if all the
       program-files and command  line  source  texts  had  been  concatenated
       together.   This  is  useful  for  building libraries of AWK functions,
       without having to include them in each new AWK program that uses  them.
       It also provides the ability to mix library functions with command line
       programs.

       In addition, lines beginning with @include may be used to include other
       source files into your program, making library use even easier.

       The  environment  variable  AWKPATH specifies a search path to use when
       finding source files named with the -f option.  If this  variable  does
       not  exist,  the default path is ".:/usr/local/share/awk".  (The actual
       directory may vary, depending upon how gawk was built  and  installed.)
       If a file name given to the -f option contains a “/” character, no path
       search is performed.

       Gawk executes AWK programs in the following order.  First, all variable
       assignments specified via the -v option are performed.  Next, gawk com‐
       piles the program into an internal form.  Then, gawk executes the  code
       in  the  BEGIN  block(s)  (if any), and then proceeds to read each file
       named in the ARGV array (up to ARGV[ARGC]).   If  there  are  no  files
       named on the command line, gawk reads the standard input.

       If a filename on the command line has the form var=val it is treated as
       a variable assignment.  The variable var will  be  assigned  the  value
       val.   (This  happens after any BEGIN block(s) have been run.)  Command
       line variable assignment is most useful for dynamically assigning  val‐
       ues  to  the  variables  AWK  uses  to control how input is broken into
       fields and records.  It is also useful for controlling state if  multi‐
       ple passes are needed over a single data file.

       If  the value of a particular element of ARGV is empty (""), gawk skips
       over it.

       For each input file, if a BEGINFILE  rule  exists,  gawk  executes  the
       associated  code before processing the contents of the file. Similarly,
       gawk executes the code associated with  ENDFILE  after  processing  the
       file.

       For  each record in the input, gawk tests to see if it matches any pat‐
       tern in the AWK program.  For each pattern that the record matches, the
       associated  action  is  executed.  The patterns are tested in the order
       they occur in the program.

       Finally, after all the input is exhausted, gawk executes  the  code  in
       the END block(s) (if any).

   Command Line Directories
       According  to  POSIX,  files named on the awk command line must be text
       files.  The behavior is ``undefined'' if they are not.   Most  versions
       of awk treat a directory on the command line as a fatal error.

       Starting with version 4.0 of gawk, a directory on the command line pro‐
       duces a warning, but is otherwise skipped.  If either of the --posix or
       --traditional  options is given, then gawk reverts to treating directo‐
       ries on the command line as a fatal error.

VARIABLES, RECORDS AND FIELDS
       AWK variables are dynamic; they come into existence when they are first
       used.   Their  values  are either floating-point numbers or strings, or
       both, depending upon how they are used.  AWK also has  one  dimensional
       arrays; arrays with multiple dimensions may be simulated.  Several pre-
       defined variables are set as a program runs;  these  are  described  as
       needed and summarized below.

   Records
       Normally, records are separated by newline characters.  You can control
       how records are separated by assigning values to the built-in  variable
       RS.   If  RS is any single character, that character separates records.
       Otherwise, RS is a regular expression.  Text in the input that  matches
       this  regular expression separates the record.  However, in compatibil‐
       ity mode, only the first character of its string value is used for sep‐
       arating  records.   If  RS  is set to the null string, then records are
       separated by blank lines.  When RS is set to the null string, the  new‐
       line  character  always acts as a field separator, in addition to what‐
       ever value FS may have.

   Fields
       As each input record is read, gawk splits the record into fields, using
       the value of the FS variable as the field separator.  If FS is a single
       character, fields are separated by that character.  If FS is  the  null
       string,  then each individual character becomes a separate field.  Oth‐
       erwise, FS is expected to be a full regular expression.  In the special
       case  that FS is a single space, fields are separated by runs of spaces
       and/or tabs and/or newlines.  (But see the section POSIX COMPATIBILITY,
       below).   NOTE:  The  value  of IGNORECASE (see below) also affects how
       fields are split when FS is a regular expression, and how  records  are
       separated when RS is a regular expression.

       If  the  FIELDWIDTHS  variable is set to a space separated list of num‐
       bers, each field is expected to have fixed width, and  gawk  splits  up
       the  record  using  the  specified widths.  The value of FS is ignored.
       Assigning a new value to FS or FPAT overrides the use of FIELDWIDTHS.

       Similarly, if the FPAT variable is set to a string representing a regu‐
       lar expression, each field is made up of text that matches that regular
       expression. In this case, the regular expression describes  the  fields
       themselves, instead of the text that separates the fields.  Assigning a
       new value to FS or FIELDWIDTHS overrides the use of FPAT.

       Each field in the input record may be referenced by its  position,  $1,
       $2,  and so on.  $0 is the whole record.  Fields need not be referenced
       by constants:

              n = 5
              print $n

       prints the fifth field in the input record.

       The variable NF is set to the total  number  of  fields  in  the  input
       record.

       References  to  non-existent fields (i.e. fields after $NF) produce the
       null-string.  However, assigning to a non-existent field (e.g., $(NF+2)
       = 5) increases the value of NF, creates any intervening fields with the
       null string as their value, and causes the value of  $0  to  be  recom‐
       puted, with the fields being separated by the value of OFS.  References
       to negative numbered fields  cause  a  fatal  error.   Decrementing  NF
       causes  the  values  of  fields  past the new value to be lost, and the
       value of $0 to be recomputed, with the fields being  separated  by  the
       value of OFS.

       Assigning  a  value  to an existing field causes the whole record to be
       rebuilt when $0 is referenced.  Similarly,  assigning  a  value  to  $0
       causes the record to be resplit, creating new values for the fields.

   Built-in Variables
       Gawk's built-in variables are:

       ARGC        The  number  of  command  line  arguments (does not include
                   options to gawk, or the program source).

       ARGIND      The index in ARGV of the current file being processed.

       ARGV        Array of command line arguments.  The array is indexed from
                   0  to  ARGC - 1.  Dynamically changing the contents of ARGV
                   can control the files used for data.

       BINMODE     On non-POSIX systems, specifies use of  “binary”  mode  for
                   all  file  I/O.  Numeric values of 1, 2, or 3, specify that
                   input files, output  files,  or  all  files,  respectively,
                   should  use binary I/O.  String values of "r", or "w" spec‐
                   ify that input files, or output files, respectively, should
                   use binary I/O.  String values of "rw" or "wr" specify that
                   all files should use binary I/O.  Any other string value is
                   treated as "rw", but generates a warning message.

       CONVFMT     The conversion format for numbers, "%.6g", by default.

       ENVIRON     An  array containing the values of the current environment.
                   The array is indexed by  the  environment  variables,  each
                   element  being  the  value  of  that  variable (e.g., ENVI‐
                   RON["HOME"] might be /home/arnold).   Changing  this  array
                   does not affect the environment seen by programs which gawk
                   spawns via redirection or the system() function.

       ERRNO       If a system error occurs either  doing  a  redirection  for
                   getline,  during  a  read for getline, or during a close(),
                   then ERRNO will contain a string describing the error.  The
                   value is subject to translation in non-English locales.

       FIELDWIDTHS A  whitespace  separated  list  of field widths.  When set,
                   gawk parses the input into fields of fixed  width,  instead
                   of  using the value of the FS variable as the field separa‐
                   tor.  See Fields, above.

       FILENAME    The name of the current input file.  If no files are speci‐
                   fied  on  the  command  line, the value of FILENAME is “-”.
                   However, FILENAME  is  undefined  inside  the  BEGIN  block
                   (unless set by getline).

       FNR         The input record number in the current input file.

       FPAT        A  regular expression describing the contents of the fields
                   in a record.  When set, gawk parses the input into  fields,
                   where  the  fields match the regular expression, instead of
                   using the value of the FS variable as the field  separator.
                   See Fields, above.

       FS          The input field separator, a space by default.  See Fields,
                   above.

       IGNORECASE  Controls the case-sensitivity of all regular expression and
                   string  operations.   If  IGNORECASE  has a non-zero value,
                   then string comparisons  and  pattern  matching  in  rules,
                   field  splitting  with  FS and FPAT, record separating with
                   RS, regular expression matching with ~ and !~, and the gen‐
                   sub(),  gsub(),  index(), match(), patsplit(), split(), and
                   sub() built-in functions all ignore case when doing regular
                   expression  operations.   NOTE:  Array  subscripting is not
                   affected.  However, the asort() and asorti() functions  are
                   affected.
                   Thus,  if IGNORECASE is not equal to zero, /aB/ matches all
                   of the strings "ab", "aB", "Ab", and "AB".  As with all AWK
                   variables,  the initial value of IGNORECASE is zero, so all
                   regular expression and string operations are normally case-
                   sensitive.

       LINT        Provides  dynamic  control of the --lint option from within
                   an AWK program.  When true, gawk prints lint warnings. When
                   false,  it  does  not.   When  assigned  the  string  value
                   "fatal", lint warnings become fatal  errors,  exactly  like
                   --lint=fatal.  Any other true value just prints warnings.

       NF          The number of fields in the current input record.

       NR          The total number of input records seen so far.

       OFMT        The output format for numbers, "%.6g", by default.

       OFS         The output field separator, a space by default.

       ORS         The output record separator, by default a newline.

       PROCINFO    The  elements  of  this array provide access to information
                   about the running AWK program.  On some systems, there  may
                   be  elements  in  the  array, "group1" through "groupn" for
                   some n, which is the number of  supplementary  groups  that
                   the  process  has.   Use  the in operator to test for these
                   elements.  The following  elements  are  guaranteed  to  be
                   available:

                   PROCINFO["egid"]    the  value  of  the  getegid(2)  system
                                       call.

                   PROCINFO["strftime"]
                                       The  default  time  format  string  for
                                       strftime().

                   PROCINFO["euid"]    the  value  of  the  geteuid(2)  system
                                       call.

                   PROCINFO["FS"]      "FS" if field splitting with FS  is  in
                                       effect,  "FPAT" if field splitting with
                                       FPAT is in effect, or "FIELDWIDTHS"  if
                                       field  splitting with FIELDWIDTHS is in
                                       effect.

                   PROCINFO["gid"]     the value of the getgid(2) system call.

                   PROCINFO["pgrpid"]  the process group  ID  of  the  current
                                       process.

                   PROCINFO["pid"]     the process ID of the current process.

                   PROCINFO["ppid"]    the  parent  process  ID of the current
                                       process.

                   PROCINFO["uid"]     the value of the getuid(2) system call.

                   PROCINFO["sorted_in"]
                                       If this  element  exists  in  PROCINFO,
                                       then  its  value  controls the order in
                                       which array elements are  traversed  in
                                       for   loops.    Supported   values  are
                                       "@ind_str_asc",         "@ind_num_asc",
                                       "@val_type_asc",        "@val_str_asc",
                                       "@val_num_asc",        "@ind_str_desc",
                                       "@ind_num_desc",      "@val_type_desc",
                                       "@val_str_desc",  "@val_num_desc",  and
                                       "@unsorted".  The value can also be the
                                       name of any comparison function defined
                                       as follows:

                          function cmp_func(i1, v1, i2, v2)

                   where i1 and i2 are the indices, and v1 and v2 are the cor‐
                   responding values of the two elements being  compared.   It
                   should return a number less than, equal to, or greater than
                   0, depending on how the elements of the  array  are  to  be
                   ordered.

                   PROCINFO["version"]
                          the version of gawk.

       RS          The input record separator, by default a newline.

       RT          The record terminator.  Gawk sets RT to the input text that
                   matched the character or regular  expression  specified  by
                   RS.

       RSTART      The  index  of the first character matched by match(); 0 if
                   no match.  (This implies that character  indices  start  at
                   one.)

       RLENGTH     The  length  of  the  string  matched  by match(); -1 if no
                   match.

       SUBSEP      The character used to separate multiple subscripts in array
                   elements, by default "\034".

       TEXTDOMAIN  The text domain of the AWK program; used to find the local‐
                   ized translations for the program's strings.

   Arrays
       Arrays are subscripted with an expression between  square  brackets  ([
       and ]).  If the expression is an expression list (expr, expr ...)  then
       the array subscript is a string consisting of the concatenation of  the
       (string) value of each expression, separated by the value of the SUBSEP
       variable.  This facility  is  used  to  simulate  multiply  dimensioned
       arrays.  For example:

              i = "A"; j = "B"; k = "C"
              x[i, j, k] = "hello, world\n"

       assigns the string "hello, world\n" to the element of the array x which
       is indexed by the string "A\034B\034C".  All arrays in AWK are associa‐
       tive, i.e. indexed by string values.

       The  special  operator  in may be used to test if an array has an index
       consisting of a particular value:

              if (val in array)
                   print array[val]

       If the array has multiple subscripts, use (i, j) in array.

       The in construct may also be used in a for loop to iterate over all the
       elements of an array.

       An  element  may  be  deleted from an array using the delete statement.
       The delete statement may also be used to delete the entire contents  of
       an array, just by specifying the array name without a subscript.

       gawk  supports  true  multidimensional arrays. It does not require that
       such arrays be ``rectangular'' as in C or C++.  For example:
              a[1] = 5
              a[2][1] = 6
              a[2][2] = 7

   Variable Typing And Conversion
       Variables and fields may be (floating point) numbers,  or  strings,  or
       both.  How the value of a variable is interpreted depends upon its con‐
       text.  If used in a numeric expression, it will be treated as a number;
       if used as a string it will be treated as a string.

       To force a variable to be treated as a number, add 0 to it; to force it
       to be treated as a string, concatenate it with the null string.

       When a string must be converted to a number, the conversion  is  accom‐
       plished  using  strtod(3).   A number is converted to a string by using
       the value of CONVFMT as  a  format  string  for  sprintf(3),  with  the
       numeric  value  of  the variable as the argument.  However, even though
       all numbers in AWK are floating-point, integral values are always  con‐
       verted as integers.  Thus, given

              CONVFMT = "%2.2f"
              a = 12
              b = a ""

       the variable b has a string value of "12" and not "12.00".

       NOTE:  When  operating  in POSIX mode (such as with the --posix command
       line option), beware that locale settings may interfere  with  the  way
       decimal  numbers  are treated: the decimal separator of the numbers you
       are feeding to gawk must conform to what your locale would  expect,  be
       it a comma (,) or a period (.).

       Gawk  performs  comparisons  as  follows: If two variables are numeric,
       they are compared numerically.  If one value is numeric and  the  other
       has  a  string  value  that is a “numeric string,” then comparisons are
       also done numerically.  Otherwise, the numeric value is converted to  a
       string and a string comparison is performed.  Two strings are compared,
       of course, as strings.

       Note that string constants, such as "57", are not numeric strings, they
       are  string  constants.   The  idea of “numeric string” only applies to
       fields, getline input, FILENAME, ARGV elements,  ENVIRON  elements  and
       the  elements  of  an  array  created by split() or patsplit() that are
       numeric strings.  The basic idea is that  user  input,  and  only  user
       input, that looks numeric, should be treated that way.

       Uninitialized  variables  have the numeric value 0 and the string value
       "" (the null, or empty, string).

   Octal and Hexadecimal Constants
       You may use C-style octal and hexadecimal constants in your AWK program
       source  code.   For example, the octal value 011 is equal to decimal 9,
       and the hexadecimal value 0x11 is equal to decimal 17.

   String Constants
       String constants in AWK are sequences of  characters  enclosed  between
       double quotes (like "value").  Within strings, certain escape sequences
       are recognized, as in C.  These are:

       \\   A literal backslash.

       \a   The “alert” character; usually the ASCII BEL character.

       \b   backspace.

       \f   form-feed.

       \n   newline.

       \r   carriage return.

       \t   horizontal tab.

       \v   vertical tab.

       \xhex digits
            The character represented by the string of hexadecimal digits fol‐
            lowing the \x.  As in ANSI C, all following hexadecimal digits are
            considered part of the escape sequence.  (This feature should tell
            us something about language design by committee.)  E.g., "\x1B" is
            the ASCII ESC (escape) character.

       \ddd The character represented by the 1-, 2-, or  3-digit  sequence  of
            octal digits.  E.g., "\033" is the ASCII ESC (escape) character.

       \c   The literal character c.

       The  escape  sequences may also be used inside constant regular expres‐
       sions (e.g., /[ \t\f\n\r\v]/ matches whitespace characters).

       In compatibility mode, the characters represented by octal and hexadec‐
       imal  escape  sequences  are  treated  literally  when  used in regular
       expression constants.  Thus, /a\52b/ is equivalent to /a\*b/.

PATTERNS AND ACTIONS
       AWK is a line-oriented language.  The pattern comes first, and then the
       action.  Action statements are enclosed in { and }.  Either the pattern
       may be missing, or the action may be missing, but, of course, not both.
       If  the  pattern  is  missing,  the action is executed for every single
       record of input.  A missing action is equivalent to

              { print }

       which prints the entire record.

       Comments begin with the # character, and continue until the end of  the
       line.   Blank  lines  may  be used to separate statements.  Normally, a
       statement ends with a newline, however, this is not the case for  lines
       ending in a comma, {, ?, :, &&, or ||.  Lines ending in do or else also
       have their statements automatically continued on  the  following  line.
       In  other  cases,  a  line can be continued by ending it with a “\”, in
       which case the newline is ignored.

       Multiple statements may be put on one line by separating  them  with  a
       “;”.   This  applies to both the statements within the action part of a
       pattern-action pair (the usual case), and to the pattern-action  state‐
       ments themselves.

   Patterns
       AWK patterns may be one of the following:

              BEGIN
              END
              BEGINFILE
              ENDFILE
              /regular expression/
              relational expression
              pattern && pattern
              pattern || pattern
              pattern ? pattern : pattern
              (pattern)
              ! pattern
              pattern1, pattern2

       BEGIN  and  END  are two special kinds of patterns which are not tested
       against the input.  The action parts of all BEGIN patterns  are  merged
       as  if  all  the  statements  had been written in a single BEGIN block.
       They are executed before any of the input is read.  Similarly, all  the
       END blocks are merged, and executed when all the input is exhausted (or
       when an exit statement is executed).  BEGIN and END patterns cannot  be
       combined  with  other  patterns  in pattern expressions.  BEGIN and END
       patterns cannot have missing action parts.

       BEGINFILE and ENDFILE are additional special patterns whose bodies  are
       executed  before  reading  the  first record of each command line input
       file and after reading the last record of each file.  Inside the BEGIN‐
       FILE  rule,  the  value  of  ERRNO will be the empty string if the file
       could be opened successfully.  Otherwise, there is  some  problem  with
       the  file  and  the code should use nextfile to skip it. If that is not
       done, gawk produces its usual fatal error  for  files  that  cannot  be
       opened.

       For /regular expression/ patterns, the associated statement is executed
       for each input record that matches  the  regular  expression.   Regular
       expressions  are  the  same  as  those  in egrep(1), and are summarized
       below.

       A relational expression may use any of the operators defined  below  in
       the  section  on  actions.  These generally test whether certain fields
       match certain regular expressions.

       The &&, ||, and !  operators are logical AND, logical OR,  and  logical
       NOT,  respectively, as in C.  They do short-circuit evaluation, also as
       in C, and are used for combining more  primitive  pattern  expressions.
       As  in  most  languages, parentheses may be used to change the order of
       evaluation.

       The ?: operator is like the same operator in C.  If the  first  pattern
       is true then the pattern used for testing is the second pattern, other‐
       wise it is the third.  Only one of the second  and  third  patterns  is
       evaluated.

       The pattern1, pattern2 form of an expression is called a range pattern.
       It matches all input records starting with a record that  matches  pat‐
       tern1,  and continuing until a record that matches pattern2, inclusive.
       It does not combine with any other sort of pattern expression.

   Regular Expressions
       Regular expressions are the extended kind found  in  egrep.   They  are
       composed of characters as follows:

       c          matches the non-metacharacter c.

       \c         matches the literal character c.

       .          matches any character including newline.

       ^          matches the beginning of a string.

       $          matches the end of a string.

       [abc...]   character list, matches any of the characters abc....

       [^abc...]  negated character list, matches any character except abc....

       r1|r2      alternation: matches either r1 or r2.

       r1r2       concatenation: matches r1, and then r2.

       r+         matches one or more r's.

       r*         matches zero or more r's.

       r?         matches zero or one r's.

       (r)        grouping: matches r.

       r{n}
       r{n,}
       r{n,m}     One  or two numbers inside braces denote an interval expres‐
                  sion.  If there is one number in the braces,  the  preceding
                  regular  expression r is repeated n times.  If there are two
                  numbers separated by a comma, r is repeated n  to  m  times.
                  If  there  is  one  number  followed  by  a comma, then r is
                  repeated at least n times.

       \y         matches the empty string at either the beginning or the  end
                  of a word.

       \B         matches the empty string within a word.

       \<         matches the empty string at the beginning of a word.

       \>         matches the empty string at the end of a word.

       \s         matches any whitespace character.

       \S         matches any nonwhitespace character.

       \w         matches  any  word-constituent  character (letter, digit, or
                  underscore).

       \W         matches any character that is not word-constituent.

       \`         matches the empty  string  at  the  beginning  of  a  buffer
                  (string).

       \'         matches the empty string at the end of a buffer.

       The escape sequences that are valid in string constants (see below) are
       also valid in regular expressions.

       Character classes are a feature introduced in the  POSIX  standard.   A
       character  class  is a special notation for describing lists of charac‐
       ters that have a specific attribute, but where  the  actual  characters
       themselves  can  vary from country to country and/or from character set
       to character set.  For example, the notion of  what  is  an  alphabetic
       character differs in the USA and in France.

       A  character  class  is  only  valid in a regular expression inside the
       brackets of a character list.  Character classes consist of [:, a  key‐
       word  denoting the class, and :].  The character classes defined by the
       POSIX standard are:

       [:alnum:]  Alphanumeric characters.

       [:alpha:]  Alphabetic characters.

       [:blank:]  Space or tab characters.

       [:cntrl:]  Control characters.

       [:digit:]  Numeric characters.

       [:graph:]  Characters that are both printable and visible.  (A space is
                  printable, but not visible, while an a is both.)

       [:lower:]  Lowercase alphabetic characters.

       [:print:]  Printable  characters (characters that are not control char‐
                  acters.)

       [:punct:]  Punctuation characters (characters that are not letter, dig‐
                  its, control characters, or space characters).

       [:space:]  Space  characters (such as space, tab, and formfeed, to name
                  a few).

       [:upper:]  Uppercase alphabetic characters.

       [:xdigit:] Characters that are hexadecimal digits.

       For example, before the POSIX standard, to match  alphanumeric  charac‐
       ters, you would have had to write /[A-Za-z0-9]/.  If your character set
       had other alphabetic characters in it, this would not match  them,  and
       if  your  character set collated differently from ASCII, this might not
       even match the ASCII alphanumeric characters.  With the POSIX character
       classes,  you  can write /[[:alnum:]]/, and this matches the alphabetic
       and numeric characters in your character set, no matter what it is.

       Two additional special sequences can appear in character lists.   These
       apply  to  non-ASCII  character  sets,  which  can  have single symbols
       (called collating elements) that are represented  with  more  than  one
       character,  as  well as several characters that are equivalent for col‐
       lating, or sorting, purposes.  (E.g., in French,  a  plain  “e”  and  a
       grave-accented “`” are equivalent.)

       Collating Symbols
              A  collating  symbol  is  a  multi-character  collating  element
              enclosed in [.  and .].  For example, if ch is a collating  ele‐
              ment,  then  [[.ch.]]  is a regular expression that matches this
              collating element, while  [ch]  is  a  regular  expression  that
              matches either c or h.

       Equivalence Classes
              An  equivalence  class  is  a locale-specific name for a list of
              characters that are equivalent.  The name is enclosed in [=  and
              =].   For  example, the name e might be used to represent all of
              “e,” “´,” and “`.”  In this case, [[=e=]] is a  regular  expres‐
              sion that matches any of e, ´, or `.

       These  features are very valuable in non-English speaking locales.  The
       library functions that gawk uses for regular expression  matching  cur‐
       rently  only  recognize  POSIX character classes; they do not recognize
       collating symbols or equivalence classes.

       The \y, \B, \<, \>, \s, \S, \w, \W, \`, and \' operators  are  specific
       to  gawk;  they  are  extensions based on facilities in the GNU regular
       expression libraries.

       The various command line options control how gawk interprets characters
       in regular expressions.

       No options
              In  the  default  case, gawk provide all the facilities of POSIX
              regular expressions and the  GNU  regular  expression  operators
              described above.

       --posix
              Only  POSIX regular expressions are supported, the GNU operators
              are not special.  (E.g., \w matches a literal w).

       --traditional
              Traditional Unix awk regular expressions are matched.   The  GNU
              operators  are  not  special,  and  interval expressions are not
              available.  Characters described by octal and hexadecimal escape
              sequences  are treated literally, even if they represent regular
              expression metacharacters.

       --re-interval
              Allow interval  expressions  in  regular  expressions,  even  if
              --traditional has been provided.

   Actions
       Action  statements  are enclosed in braces, { and }.  Action statements
       consist of the usual assignment, conditional,  and  looping  statements
       found  in  most  languages.   The  operators,  control  statements, and
       input/output statements available are patterned after those in C.

   Operators
       The operators in AWK, in order of decreasing precedence, are

       (...)       Grouping

       $           Field reference.

       ++ --       Increment and decrement, both prefix and postfix.

       ^           Exponentiation (** may  also  be  used,  and  **=  for  the
                   assignment operator).

       + - !       Unary plus, unary minus, and logical negation.

       * / %       Multiplication, division, and modulus.

       + -         Addition and subtraction.

       space       String concatenation.

       |   |&      Piped I/O for getline, print, and printf.

       < > <= >= != ==
                   The regular relational operators.

       ~ !~        Regular  expression match, negated match.  NOTE: Do not use
                   a constant regular expression (/foo/) on the left-hand side
                   of  a  ~  or !~.  Only use one on the right-hand side.  The
                   expression /foo/ ~ exp has  the  same  meaning  as  (($0  ~
                   /foo/) ~ exp).  This is usually not what was intended.

       in          Array membership.

       &&          Logical AND.

       ||          Logical OR.

       ?:          The  C  conditional  expression.  This has the form expr1 ?
                   expr2 : expr3.  If expr1 is true, the value of the  expres‐
                   sion  is  expr2,  otherwise it is expr3.  Only one of expr2
                   and expr3 is evaluated.

       = += -= *= /= %= ^=
                   Assignment.  Both absolute assignment  (var  =  value)  and
                   operator-assignment (the other forms) are supported.

   Control Statements
       The control statements are as follows:

              if (condition) statement [ else statement ]
              while (condition) statement
              do statement while (condition)
              for (expr1; expr2; expr3) statement
              for (var in array) statement
              break
              continue
              delete array[index]
              delete array
              exit [ expression ]
              { statements }
              switch (expression) {
              case value|regex : statement
              ...
              [ default: statement ]
              }

   I/O Statements
       The input/output statements are as follows:

       close(file [, how])   Close file, pipe or co-process.  The optional how
                             should only be used when closing  one  end  of  a
                             two-way  pipe  to  a  co-process.   It  must be a
                             string value, either "to" or "from".

       getline               Set $0 from next input record; set NF, NR, FNR.

       getline <file         Set $0 from next record of file; set NF.

       getline var           Set var from next input record; set NR, FNR.

       getline var <file     Set var from next record of file.

       command | getline [var]
                             Run command piping the output either into  $0  or
                             var, as above.

       command |& getline [var]
                             Run  command  as  a  co-process piping the output
                             either into $0 or var,  as  above.   Co-processes
                             are  a  gawk  extension.   (command can also be a
                             socket.  See the subsection Special  File  Names,
                             below.)

       next                  Stop  processing  the  current input record.  The
                             next input record is read and  processing  starts
                             over  with  the first pattern in the AWK program.
                             If the end of the input data is reached, the  END
                             block(s), if any, are executed.

       nextfile              Stop processing the current input file.  The next
                             input record read comes from the next input file.
                             FILENAME  and ARGIND are updated, FNR is reset to
                             1, and processing starts over with the first pat‐
                             tern  in the AWK program. If the end of the input
                             data is reached, the END block(s),  if  any,  are
                             executed.

       print                 Print  the  current record.  The output record is
                             terminated with the value of the ORS variable.

       print expr-list       Print expressions.  Each expression is  separated
                             by  the  value  of  the OFS variable.  The output
                             record is terminated with the value  of  the  ORS
                             variable.

       print expr-list >file Print  expressions  on  file.  Each expression is
                             separated by the value of the OFS variable.   The
                             output record is terminated with the value of the
                             ORS variable.

       printf fmt, expr-list Format and  print.   See  The  printf  Statement,
                             below.

       printf fmt, expr-list >file
                             Format and print on file.

       system(cmd-line)      Execute the command cmd-line, and return the exit
                             status.  (This may not be available on  non-POSIX
                             systems.)

       fflush([file])        Flush any buffers associated with the open output
                             file or pipe file.  If file is missing or  if  it
                             is  the  null  string, then flush all open output
                             files and pipes.

       Additional output redirections are allowed for print and printf.

       print ... >> file
              Appends output to the file.

       print ... | command
              Writes on a pipe.

       print ... |& command
              Sends data to a co-process or socket.  (See also the  subsection
              Special File Names, below.)

       The  getline  command returns 1 on success, 0 on end of file, and -1 on
       an error.  Upon an error, ERRNO contains a string describing the  prob‐
       lem.

       NOTE:  Failure  in  opening a two-way socket will result in a non-fatal
       error being returned to the calling function.  If  using  a  pipe,  co-
       process,  or  socket to getline, or from print or printf within a loop,
       you must use close() to create new instances of the command or  socket.
       AWK  does  not automatically close pipes, sockets, or co-processes when
       they return EOF.

   The printf Statement
       The AWK versions of the printf statement and  sprintf()  function  (see
       below) accept the following conversion specification formats:

       %c      A single character.  If the argument used for %c is numeric, it
               is treated as a character and printed.  Otherwise, the argument
               is assumed to be a string, and the only first character of that
               string is printed.

       %d, %i  A decimal number (the integer part).

       %e, %E  A floating point number of the form [-]d.dddddde[+-]dd.  The %E
               format uses E instead of e.

       %f, %F  A floating point number of the form [-]ddd.dddddd.  If the sys‐
               tem library supports it, %F is available as well. This is  like
               %f,  but  uses  capital  letters for special “not a number” and
               “infinity” values. If %F is not available, gawk uses %f.

       %g, %G  Use %e or %f conversion, whichever is shorter, with nonsignifi‐
               cant zeros suppressed.  The %G format uses %E instead of %e.

       %o      An unsigned octal number (also an integer).

       %u      An unsigned decimal number (again, an integer).

       %s      A character string.

       %x, %X  An  unsigned  hexadecimal  number  (an integer).  The %X format
               uses ABCDEF instead of abcdef.

       %%      A single % character; no argument is converted.

       Optional, additional parameters may lie between the % and  the  control
       letter:

       count$ Use the count'th argument at this point in the formatting.  This
              is called a positional specifier and is intended  primarily  for
              use  in translated versions of format strings, not in the origi‐
              nal text of an AWK program.  It is a gawk extension.

       -      The expression should be left-justified within its field.

       space  For numeric conversions, prefix positive values  with  a  space,
              and negative values with a minus sign.

       +      The  plus sign, used before the width modifier (see below), says
              to always supply a sign for numeric  conversions,  even  if  the
              data  to  be  formatted  is positive.  The + overrides the space
              modifier.

       #      Use an “alternate form” for certain control  letters.   For  %o,
              supply  a  leading zero.  For %x, and %X, supply a leading 0x or
              0X for a nonzero result.  For %e, %E,  %f  and  %F,  the  result
              always contains a decimal point.  For %g, and %G, trailing zeros
              are not removed from the result.

       0      A leading 0 (zero) acts as a flag, that indicates output  should
              be  padded  with zeroes instead of spaces.  This applies only to
              the numeric output formats.  This flag only has an  effect  when
              the field width is wider than the value to be printed.

       width  The field should be padded to this width.  The field is normally
              padded with spaces.  If the 0 flag has been used, it  is  padded
              with zeroes.

       .prec  A number that specifies the precision to use when printing.  For
              the %e, %E, %f and %F, formats, this  specifies  the  number  of
              digits  you want printed to the right of the decimal point.  For
              the %g, and %G formats, it specifies the maximum number of  sig‐
              nificant digits.  For the %d, %i, %o, %u, %x, and %X formats, it
              specifies the minimum number of digits to  print.   For  %s,  it
              specifies  the maximum number of characters from the string that
              should be printed.

       The dynamic width and prec capabilities of the ANSI C printf() routines
       are supported.  A * in place of either the width or prec specifications
       causes their values to be taken from the argument  list  to  printf  or
       sprintf().   To use a positional specifier with a dynamic width or pre‐
       cision, supply the count$ after the * in the format string.  For  exam‐
       ple, "%3$*2$.*1$s".

   Special File Names
       When  doing I/O redirection from either print or printf into a file, or
       via getline from a file,  gawk  recognizes  certain  special  filenames
       internally.   These  filenames  allow  access  to open file descriptors
       inherited from gawk's parent process (usually the shell).   These  file
       names  may  also  be  used on the command line to name data files.  The
       filenames are:

       /dev/stdin  The standard input.

       /dev/stdout The standard output.

       /dev/stderr The standard error output.

       /dev/fd/n   The file associated with the open file descriptor n.

       These are particularly useful for error messages.  For example:

              print "You blew it!" > "/dev/stderr"

       whereas you would otherwise have to use

              print "You blew it!" | "cat 1>&2"

       The following special filenames may be  used  with  the  |&  co-process
       operator for creating TCP/IP network connections:

       /inet/tcp/lport/rhost/rport
       /inet4/tcp/lport/rhost/rport
       /inet6/tcp/lport/rhost/rport
              Files for a TCP/IP connection on local port lport to remote host
              rhost on remote port rport.  Use a port of 0 to have the  system
              pick a port.  Use /inet4 to force an IPv4 connection, and /inet6
              to force an  IPv6  connection.   Plain  /inet  uses  the  system
              default (most likely IPv4).

       /inet/udp/lport/rhost/rport
       /inet4/udp/lport/rhost/rport
       /inet6/udp/lport/rhost/rport
              Similar, but use UDP/IP instead of TCP/IP.

   Numeric Functions
       AWK has the following built-in arithmetic functions:

       atan2(y, x)   Return the arctangent of y/x in radians.

       cos(expr)     Return the cosine of expr, which is in radians.

       exp(expr)     The exponential function.

       int(expr)     Truncate to integer.

       log(expr)     The natural logarithm function.

       rand()        Return  a random number N, between 0 and 1, such that 0 ≤
                     N < 1.

       sin(expr)     Return the sine of expr, which is in radians.

       sqrt(expr)    The square root function.

       srand([expr]) Use expr as the new seed for the random number generator.
                     If  no expr is provided, use the time of day.  The return
                     value is the previous seed for the random number  genera‐
                     tor.

   String Functions
       Gawk has the following built-in string functions:

       asort(s [, d [, how] ]) Return  the  number  of  elements in the source
                               array s.  Sort the contents of s  using  gawk's
                               normal  rules for comparing values, and replace
                               the indices of the sorted values s with sequen‐
                               tial  integers starting with 1. If the optional
                               destination array d is  specified,  then  first
                               duplicate  s  into  d, and then sort d, leaving
                               the indices of the source  array  s  unchanged.
                               The  optional string how controls the direction
                               and the comparison mode.  Valid values for  how
                               are    any    of    the   strings   valid   for
                               PROCINFO["sorted_in"].  It can also be the name
                               of   a   user-defined  comparison  function  as
                               described in PROCINFO["sorted_in"].

       asorti(s [, d [, how] ])
                               Return the number of  elements  in  the  source
                               array  s.   The behavior is the same as that of
                               asort(), except that the array indices are used
                               for  sorting, not the array values.  When done,
                               the array is indexed numerically, and the  val‐
                               ues  are  those  of  the original indices.  The
                               original values are lost; thus provide a second
                               array  if  you  wish  to preserve the original.
                               The purpose of the optional string how  is  the
                               same as described in asort() above.

       gensub(r, s, h [, t])   Search  the  target string t for matches of the
                               regular expression r.  If h is a string  begin‐
                               ning with g or G, then replace all matches of r
                               with s.  Otherwise, h is  a  number  indicating
                               which  match of r to replace.  If t is not sup‐
                               plied, use $0 instead.  Within the  replacement
                               text  s,  the  sequence  \n, where n is a digit
                               from 1 to 9, may be used to indicate  just  the
                               text that matched the n'th parenthesized subex‐
                               pression.   The  sequence  \0  represents   the
                               entire  matched  text, as does the character &.
                               Unlike sub() and gsub(), the modified string is
                               returned as the result of the function, and the
                               original target string is not changed.

       gsub(r, s [, t])        For each substring matching the regular expres‐
                               sion  r  in the string t, substitute the string
                               s, and return the number of substitutions.   If
                               t  is  not  supplied,  use  $0.   An  &  in the
                               replacement text is replaced with the text that
                               was  actually matched.  Use \& to get a literal
                               &.  (This must be typed  as  "\\&";  see  GAWK:
                               Effective  AWK Programming for a fuller discus‐
                               sion of the rules for &'s  and  backslashes  in
                               the replacement text of sub(), gsub(), and gen‐
                               sub().)

       index(s, t)             Return the index of the string t in the  string
                               s,  or  0  if  t is not present.  (This implies
                               that character indices start at one.)

       length([s])             Return the length  of  the  string  s,  or  the
                               length  of  $0 if s is not supplied.  As a non-
                               standard extension,  with  an  array  argument,
                               length()  returns the number of elements in the
                               array.

       match(s, r [, a])       Return the position  in  s  where  the  regular
                               expression  r occurs, or 0 if r is not present,
                               and set the values of RSTART and RLENGTH.  Note
                               that  the argument order is the same as for the
                               ~ operator: str ~ re.  If array a is  provided,
                               a  is cleared and then elements 1 through n are
                               filled with the portions of s  that  match  the
                               corresponding parenthesized subexpression in r.
                               The 0'th element of a contains the portion of s
                               matched  by  the  entire  regular expression r.
                               Subscripts a[n, "start"],  and  a[n,  "length"]
                               provide  the  starting  index in the string and
                               length  respectively,  of  each  matching  sub‐
                               string.

       patsplit(s, a [, r [, seps] ])
                               Split  the  string  s  into the array a and the
                               separators array seps on the regular expression
                               r,  and  return  the number of fields.  Element
                               values are the portions of s  that  matched  r.
                               The  value  of  seps[i]  is  the separator that
                               appeared in front of a[i+1].  If r is  omitted,
                               FPAT  is  used  instead.  The arrays a and seps
                               are cleared first.  Splitting  behaves  identi‐
                               cally  to  field splitting with FPAT, described
                               above.

       split(s, a [, r [, seps] ])
                               Split the string s into the  array  a  and  the
                               separators array seps on the regular expression
                               r, and return the number of fields.   If  r  is
                               omitted,  FS is used instead.  The arrays a and
                               seps are cleared first.  seps[i] is  the  field
                               separator matched by r between a[i] and a[i+1].
                               If r is a single space, then leading whitespace
                               in  s goes into the extra array element seps[0]
                               and trailing whitespace  goes  into  the  extra
                               array  element  seps[n],  where n is the return
                               value  of  split(s,  a,  r,  seps).   Splitting
                               behaves   identically   to   field   splitting,
                               described above.

       sprintf(fmt, expr-list) Prints expr-list according to fmt, and  returns
                               the resulting string.

       strtonum(str)           Examine  str, and return its numeric value.  If
                               str begins with a leading 0, strtonum() assumes
                               that  str  is  an  octal number.  If str begins
                               with a leading 0x  or  0X,  strtonum()  assumes
                               that  str  is a hexadecimal number.  Otherwise,
                               decimal is assumed.

       sub(r, s [, t])         Just like gsub(), but replace  only  the  first
                               matching substring.

       substr(s, i [, n])      Return  the  at most n-character substring of s
                               starting at i.  If n is omitted, use  the  rest
                               of s.

       tolower(str)            Return  a  copy of the string str, with all the
                               uppercase characters in str translated to their
                               corresponding   lowercase  counterparts.   Non-
                               alphabetic characters are left unchanged.

       toupper(str)            Return a copy of the string str, with  all  the
                               lowercase characters in str translated to their
                               corresponding  uppercase  counterparts.    Non-
                               alphabetic characters are left unchanged.

       Gawk  is  multibyte aware.  This means that index(), length(), substr()
       and match() all work in terms of characters, not bytes.

   Time Functions
       Since one of the primary uses of AWK programs is processing  log  files
       that  contain time stamp information, gawk provides the following func‐
       tions for obtaining time stamps and formatting them.

       mktime(datespec)
                 Turn datespec into a time stamp of the same form as  returned
                 by  systime(),  and  return  the  result.   The datespec is a
                 string of the form YYYY MM DD HH MM SS[ DST].   The  contents
                 of  the  string are six or seven numbers representing respec‐
                 tively the full year including century, the month from  1  to
                 12,  the  day  of the month from 1 to 31, the hour of the day
                 from 0 to 23, the minute from 0 to 59, the second from  0  to
                 60,  and  an  optional  daylight  saving flag.  The values of
                 these numbers need not be within the  ranges  specified;  for
                 example,  an  hour  of  -1 means 1 hour before midnight.  The
                 origin-zero Gregorian calendar is assumed, with year  0  pre‐
                 ceding  year  1  and  year  -1 preceding year 0.  The time is
                 assumed to be in the local timezone.  If the daylight  saving
                 flag  is  positive, the time is assumed to be daylight saving
                 time; if zero, the time is assumed to be standard  time;  and
                 if  negative  (the  default),  mktime() attempts to determine
                 whether daylight saving time is in effect for  the  specified
                 time.  If datespec does not contain enough elements or if the
                 resulting time is out of range, mktime() returns -1.

       strftime([format [, timestamp[, utc-flag]]])
                 Format timestamp according to the  specification  in  format.
                 If  utc-flag  is  present  and  is  non-zero or non-null, the
                 result is in UTC, otherwise the result is in local time.  The
                 timestamp  should  be  of  the  same form as returned by sys‐
                 time().  If timestamp is missing, the current time of day  is
                 used.   If  format is missing, a default format equivalent to
                 the output of date(1) is used.  The default format is  avail‐
                 able  in PROCINFO["strftime"].  See the specification for the
                 strftime() function in ANSI C for the format conversions that
                 are guaranteed to be available.

       systime() Return the current time of day as the number of seconds since
                 the Epoch (1970-01-01 00:00:00 UTC on POSIX systems).

   Bit Manipulations Functions
       Gawk supplies the following bit manipulation functions.  They  work  by
       converting  double-precision  floating  point values to uintmax_t inte‐
       gers, doing the operation, and  then  converting  the  result  back  to
       floating point.  The functions are:

       and(v1, v2)         Return the bitwise AND of the values provided by v1
                           and v2.

       compl(val)          Return the bitwise complement of val.

       lshift(val, count)  Return the value of  val,  shifted  left  by  count
                           bits.

       or(v1, v2)          Return  the bitwise OR of the values provided by v1
                           and v2.

       rshift(val, count)  Return the value of val,  shifted  right  by  count
                           bits.

       xor(v1, v2)         Return the bitwise XOR of the values provided by v1
                           and v2.

   Type Function
       The following function is for use with multidimensional arrays.

       isarray(x)
              Return true if x is an array, false otherwise.

   Internationalization Functions
       The following functions may be used from within your  AWK  program  for
       translating strings at run-time.  For full details, see GAWK: Effective
       AWK Programming.

       bindtextdomain(directory [, domain])
              Specify the directory where gawk looks for  the  .mo  files,  in
              case they will not or cannot be placed in the ``standard'' loca‐
              tions (e.g., during testing).  It returns  the  directory  where
              domain is ``bound.''
              The  default domain is the value of TEXTDOMAIN.  If directory is
              the null string (""), then bindtextdomain() returns the  current
              binding for the given domain.

       dcgettext(string [, domain [, category]])
              Return  the  translation  of  string  in  text domain domain for
              locale category category.  The default value for domain  is  the
              current  value of TEXTDOMAIN.  The default value for category is
              "LC_MESSAGES".
              If you supply a value for category, it must be a string equal to
              one  of the known locale categories described in GAWK: Effective
              AWK Programming.  You must  also  supply  a  text  domain.   Use
              TEXTDOMAIN if you want to use the current domain.

       dcngettext(string1 , string2 , number [, domain [, category]])
              Return  the  plural  form  used for number of the translation of
              string1 and string2 in text domain domain  for  locale  category
              category.   The default value for domain is the current value of
              TEXTDOMAIN.  The default value for category is "LC_MESSAGES".
              If you supply a value for category, it must be a string equal to
              one  of the known locale categories described in GAWK: Effective
              AWK Programming.  You must  also  supply  a  text  domain.   Use
              TEXTDOMAIN if you want to use the current domain.

USER-DEFINED FUNCTIONS
       Functions in AWK are defined as follows:

              function name(parameter list) { statements }

       Functions  are executed when they are called from within expressions in
       either patterns or actions.  Actual parameters supplied in the function
       call  are  used  to  instantiate  the formal parameters declared in the
       function.  Arrays are passed by reference, other variables  are  passed
       by value.

       Since  functions were not originally part of the AWK language, the pro‐
       vision for local variables is rather clumsy: They are declared as extra
       parameters  in the parameter list.  The convention is to separate local
       variables from real parameters by extra spaces in the  parameter  list.
       For example:

              function  f(p, q,     a, b)   # a and b are local
              {
                   ...
              }

              /abc/     { ... ; f(1, 2) ; ... }

       The left parenthesis in a function call is required to immediately fol‐
       low the function name, without any intervening whitespace.  This avoids
       a  syntactic  ambiguity with the concatenation operator.  This restric‐
       tion does not apply to the built-in functions listed above.

       Functions may call each other and may be recursive.   Function  parame‐
       ters used as local variables are initialized to the null string and the
       number zero upon function invocation.

       Use return expr to return a value from a function.  The return value is
       undefined if no value is provided, or if the function returns by “fall‐
       ing off” the end.

       As a gawk extension, functions may be called indirectly.  To  do  this,
       assign  the  name of the function to be called, as a string, to a vari‐
       able.  Then use the variable as if it were the name of a function, pre‐
       fixed with an @ sign, like so:
              function  myfunc()
              {
                   print "myfunc called"
                   ...
              }

              {    ...
                   the_func = "myfunc"
                   @the_func()    # call through the_func to myfunc
                   ...
              }

       If  --lint has been provided, gawk warns about calls to undefined func‐
       tions at parse time, instead of at  run  time.   Calling  an  undefined
       function at run time is a fatal error.

       The word func may be used in place of function.

DYNAMICALLY LOADING NEW FUNCTIONS
       You  can  dynamically  add  new  built-in functions to the running gawk
       interpreter.  The full details are beyond  the  scope  of  this  manual
       page; see GAWK: Effective AWK Programming for the details.

       extension(object, function)
               Dynamically  link  the  shared object file named by object, and
               invoke function in  that  object,  to  perform  initialization.
               These  should  both  be  provided as strings.  Return the value
               returned by function.

       Using this feature at the C level is not pretty, but it is unlikely  to
       go away. Additional mechanisms may be added at some point.

SIGNALS
       pgawk  accepts  two  signals.   SIGUSR1 causes it to dump a profile and
       function call stack to the profile file, which is  either  awkprof.out,
       or  whatever file was named with the --profile option.  It then contin‐
       ues to run.  SIGHUP causes pgawk to dump the profile and function  call
       stack and then exit.

INTERNATIONALIZATION
       String constants are sequences of characters enclosed in double quotes.
       In non-English speaking environments, it is possible to mark strings in
       the AWK program as requiring translation to the local natural language.
       Such strings are marked in the AWK program with  a  leading  underscore
       (“_”).  For example,

              gawk 'BEGIN { print "hello, world" }'

       always prints hello, world.  But,

              gawk 'BEGIN { print _"hello, world" }'

       might print bonjour, monde in France.

       There are several steps involved in producing and running a localizable
       AWK program.

       1.  Add a BEGIN action to assign a value to the TEXTDOMAIN variable  to
           set the text domain to a name associated with your program:

           BEGIN { TEXTDOMAIN = "myprog" }

       This  allows  gawk  to  find the .mo file associated with your program.
       Without this step, gawk uses the messages  text  domain,  which  likely
       does not contain translations for your program.

       2.  Mark  all  strings  that  should  be translated with leading under‐
           scores.

       3.  If necessary, use the dcgettext() and/or bindtextdomain() functions
           in your program, as appropriate.

       4.  Run  gawk  --gen-pot  -f  myprog.awk > myprog.pot to generate a .po
           file for your program.

       5.  Provide appropriate translations, and build and install the  corre‐
           sponding .mo files.

       The internationalization features are described in full detail in GAWK:
       Effective AWK Programming.

POSIX COMPATIBILITY
       A primary goal for gawk is compatibility with the  POSIX  standard,  as
       well  as with the latest version of UNIX awk.  To this end, gawk incor‐
       porates the following user visible features which are not described  in
       the AWK book, but are part of the Bell Laboratories version of awk, and
       are in the POSIX standard.

       The book indicates that command line variable assignment  happens  when
       awk  would  otherwise  open  the argument as a file, which is after the
       BEGIN block is executed.  However,  in  earlier  implementations,  when
       such an assignment appeared before any file names, the assignment would
       happen before the BEGIN block was run.  Applications came to depend  on
       this  “feature.”   When awk was changed to match its documentation, the
       -v option for assigning variables before program execution was added to
       accommodate  applications  that  depended upon the old behavior.  (This
       feature was agreed upon by both  the  Bell  Laboratories  and  the  GNU
       developers.)

       When  processing arguments, gawk uses the special option “--” to signal
       the end of arguments.  In compatibility mode, it warns about but other‐
       wise  ignores  undefined  options.  In normal operation, such arguments
       are passed on to the AWK program for it to process.

       The AWK book does not define the return value of  srand().   The  POSIX
       standard has it return the seed it was using, to allow keeping track of
       random number sequences.  Therefore srand() in gawk  also  returns  its
       current seed.

       Other  new features are: The use of multiple -f options (from MKS awk);
       the ENVIRON array; the \a, and \v escape sequences (done originally  in
       gawk  and  fed  back into the Bell Laboratories version); the tolower()
       and toupper() built-in functions (from the Bell Laboratories  version);
       and  the  ANSI C conversion specifications in printf (done first in the
       Bell Laboratories version).

HISTORICAL FEATURES
       There is one feature of historical AWK implementations that  gawk  sup‐
       ports:  It  is possible to call the length() built-in function not only
       with no argument, but even without parentheses!  Thus,

              a = length     # Holy Algol 60, Batman!

       is the same as either of

              a = length()
              a = length($0)

       Using this feature is poor practice, and gawk issues  a  warning  about
       its use if --lint is specified on the command line.

GNU EXTENSIONS
       Gawk  has  a  number of extensions to POSIX awk.  They are described in
       this section.  All the extensions described here  can  be  disabled  by
       invoking gawk with the --traditional or --posix options.

       The following features of gawk are not available in POSIX awk.

       · No  path  search  is  performed  for  files  named via the -f option.
         Therefore the AWKPATH environment variable is not special.

       · There is no facility for doing file inclusion (gawk's @include mecha‐
         nism).

       · The \x escape sequence.  (Disabled with --posix.)

       · The  ability  to  continue  lines  after  ?   and  :.  (Disabled with
         --posix.)

       · Octal and hexadecimal constants in AWK programs.

       · The ARGIND, BINMODE, ERRNO, LINT, RT and TEXTDOMAIN variables are not
         special.

       · The IGNORECASE variable and its side-effects are not available.

       · The FIELDWIDTHS variable and fixed-width field splitting.

       · The FPAT variable and field splitting based on field values.

       · The PROCINFO array is not available.

       · The use of RS as a regular expression.

       · The  special  file names available for I/O redirection are not recog‐
         nized.

       · The |& operator for creating co-processes.

       · The BEGINFILE and ENDFILE special patterns are not available.

       · The ability to split out individual characters using the null  string
         as the value of FS, and as the third argument to split().

       · An  optional  fourth  argument  to  split()  to receive the separator
         texts.

       · The optional second argument to the close() function.

       · The optional third argument to the match() function.

       · The ability to use positional specifiers with printf and sprintf().

       · The ability to pass an array to length().

       · The use of delete array to delete the entire contents of an array.

       · The use of nextfile to abandon processing of the current input file.

       · The and(), asort(), asorti(), bindtextdomain(), compl(), dcgettext(),
         dcngettext(),   gensub(),   lshift(),   mktime(),  or(),  patsplit(),
         rshift(), strftime(), strtonum(), systime() and xor() functions.

       · Localizable strings.

       · Adding new built-in functions dynamically with the extension()  func‐
         tion.

       The  AWK book does not define the return value of the close() function.
       Gawk's close() returns the value from  fclose(3),  or  pclose(3),  when
       closing an output file or pipe, respectively.  It returns the process's
       exit status when closing an input pipe.  The return value is -1 if  the
       named file, pipe or co-process was not opened with a redirection.

       When  gawk is invoked with the --traditional option, if the fs argument
       to the -F option is “t”, then FS is set to  the  tab  character.   Note
       that  typing  gawk  -F\t ...  simply causes the shell to quote the “t,”
       and does not pass “\t” to the -F option.  Since this is a  rather  ugly
       special  case, it is not the default behavior.  This behavior also does
       not occur if --posix has been specified.  To really get a tab character
       as  the  field  separator, it is best to use single quotes: gawk -F'\t'
       ....

ENVIRONMENT VARIABLES
       The AWKPATH environment variable can be  used  to  provide  a  list  of
       directories  that gawk searches when looking for files named via the -f
       and --file options.

       For socket communication, two special environment variables can be used
       to  control the number of retries (GAWK_SOCK_RETRIES), and the interval
       between retries (GAWK_MSEC_SLEEP).  The interval is in milliseconds. On
       systems  that  do  not support usleep(3), the value is rounded up to an
       integral number of seconds.

       If POSIXLY_CORRECT exists in the environment, then gawk behaves exactly
       as  if  --posix  had been specified on the command line.  If --lint has
       been specified, gawk issues a warning message to this effect.

EXIT STATUS
       If the exit statement is used with a value, then gawk  exits  with  the
       numeric value given to it.

       Otherwise,  if there were no problems during execution, gawk exits with
       the value of the C constant EXIT_SUCCESS.  This is usually zero.

       If an error occurs, gawk  exits  with  the  value  of  the  C  constant
       EXIT_FAILURE.  This is usually one.

       If  gawk exits because of a fatal error, the exit status is 2.  On non-
       POSIX systems, this value may be mapped to EXIT_FAILURE.

VERSION INFORMATION
       This man page documents gawk, version 4.0.

AUTHORS
       The original version of UNIX awk was designed and implemented by Alfred
       Aho, Peter Weinberger, and Brian Kernighan of Bell Laboratories.  Brian
       Kernighan continues to maintain and enhance it.

       Paul Rubin and Jay Fenlason, of the  Free  Software  Foundation,  wrote
       gawk,  to be compatible with the original version of awk distributed in
       Seventh Edition UNIX.  John Woods contributed a number  of  bug  fixes.
       David  Trueman,  with contributions from Arnold Robbins, made gawk com‐
       patible with the new version of UNIX awk.  Arnold Robbins is  the  cur‐
       rent maintainer.

       The  initial  DOS  port  was  done  by Conrad Kwok and Scott Garfinkle.
       Scott Deifik maintains the port to MS-DOS using DJGPP.   Eli  Zaretskii
       maintains  the port to MS-Windows using MinGW.  Pat Rankin did the port
       to VMS, and Michal Jaegermann did the port to the Atari ST.   The  port
       to  OS/2  was  done by Kai Uwe Rommel, with contributions and help from
       Darrel Hankerson.  Andreas Buening now maintains the  OS/2  port.   The
       late  Fred  Fish  supplied support for the Amiga, and Martin Brown pro‐
       vided the BeOS port.  Stephen Davies provided the original Tandem port,
       and  Matthew Woehlke provided changes for Tandem's POSIX-compliant sys‐
       tems.  Dave Pitts provided the port to z/OS.

       See the README file in the gawk distribution for up-to-date information
       about maintainers and which ports are currently supported.

BUG REPORTS
       If  you  find  a  bug  in  gawk,  please  send  electronic mail to bug-
       gawk@gnu.org.  Please include your operating system and  its  revision,
       the version of gawk (from gawk --version), which C compiler you used to
       compile it, and a test program and data that are as small  as  possible
       for reproducing the problem.

       Before  sending  a  bug report, please do the following things.  First,
       verify that you have the latest version of gawk.   Many  bugs  (usually
       subtle  ones)  are  fixed at each release, and if yours is out of date,
       the problem may already have been solved.  Second, please see  if  set‐
       ting  the  environment  variable  LC_ALL  to  LC_ALL=C causes things to
       behave as you expect. If so, it's a locale issue, and may  or  may  not
       really  be a bug.  Finally, please read this man page and the reference
       manual carefully to be sure that what you think is  a  bug  really  is,
       instead of just a quirk in the language.

       Whatever  you do, do NOT post a bug report in comp.lang.awk.  While the
       gawk developers occasionally read this newsgroup, posting  bug  reports
       there  is  an  unreliable  way to report bugs.  Instead, please use the
       electronic mail addresses given above.

       If you're using a GNU/Linux or BSD-based system, you may wish to submit
       a  bug  report  to  the  vendor of your distribution.  That's fine, but
       please send a copy to the official email address as well, since there's
       no  guarantee  that  the bug report will be forwarded to the gawk main‐
       tainer.

BUGS
       The -F option is not necessary given the command line variable  assign‐
       ment feature; it remains only for backwards compatibility.

       Syntactically  invalid  single  character programs tend to overflow the
       parse stack, generating a rather unhelpful message.  Such programs  are
       surprisingly  difficult to diagnose in the completely general case, and
       the effort to do so really is not worth it.

SEE ALSO
       egrep(1), getpid(2),  getppid(2),  getpgrp(2),  getuid(2),  geteuid(2),
       getgid(2), getegid(2), getgroups(2), usleep(3)

       The  AWK Programming Language, Alfred V. Aho, Brian W. Kernighan, Peter
       J. Weinberger, Addison-Wesley, 1988.  ISBN 0-201-07981-X.

       GAWK: Effective AWK Programming, Edition 4.0,  shipped  with  the  gawk
       source.   The  current  version of this document is available online at
       http://www.gnu.org/software/gawk/manual.

EXAMPLES
       Print and sort the login names of all users:

            BEGIN     { FS = ":" }
                 { print $1 | "sort" }

       Count lines in a file:

                 { nlines++ }
            END  { print nlines }

       Precede each line by its number in the file:

            { print FNR, $0 }

       Concatenate and line number (a variation on a theme):

            { print NR, $0 }

       Run an external command for particular lines of data:

            tail -f access_log |
            awk '/myhome.html/ { system("nmap " $1 ">> logdir/myhome.html") }'

ACKNOWLEDGEMENTS
       Brian Kernighan of Bell Laboratories provided valuable assistance  dur‐
       ing testing and debugging.  We thank him.

COPYING PERMISSIONS
       Copyright © 1989, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999,
       2001, 2002, 2003, 2004, 2005, 2007,  2009,  2010,  2011  Free  Software
       Foundation, Inc.

       Permission  is  granted  to make and distribute verbatim copies of this
       manual page provided the copyright notice and  this  permission  notice
       are preserved on all copies.

       Permission  is granted to copy and distribute modified versions of this
       manual page under the conditions for verbatim  copying,  provided  that
       the  entire  resulting derived work is distributed under the terms of a
       permission notice identical to this one.

       Permission is granted to copy and distribute translations of this  man‐
       ual page into another language, under the above conditions for modified
       versions, except that this permission notice may be stated in a  trans‐
       lation approved by the Foundation.



Free Software Foundation          Dec 07 2012                          GAWK(1)
awk(ENDCOMMAND
cat(STARTCOMMAND
CAT(1)                           User Commands                          CAT(1)



NAME
       cat - concatenate files and print on the standard output

SYNOPSIS
       cat [OPTION]... [FILE]...

DESCRIPTION
       Concatenate FILE(s), or standard input, to standard output.

       -A, --show-all
              equivalent to -vET

       -b, --number-nonblank
              number nonempty output lines, overrides -n

       -e     equivalent to -vE

       -E, --show-ends
              display $ at end of each line

       -n, --number
              number all output lines

       -s, --squeeze-blank
              suppress repeated empty output lines

       -t     equivalent to -vT

       -T, --show-tabs
              display TAB characters as ^I

       -u     (ignored)

       -v, --show-nonprinting
              use ^ and M- notation, except for LFD and TAB

       --help display this help and exit

       --version
              output version information and exit

       With no FILE, or when FILE is -, read standard input.

EXAMPLES
       cat f - g
              Output f's contents, then standard input, then g's contents.

       cat    Copy standard input to standard output.

       GNU  coreutils  online  help:  <http://www.gnu.org/software/coreutils/>
       Report cat translation bugs to <http://translationproject.org/team/>

AUTHOR
       Written by Torbjorn Granlund and Richard M. Stallman.

COPYRIGHT
       Copyright © 2013 Free Software Foundation, Inc.   License  GPLv3+:  GNU
       GPL version 3 or later <http://gnu.org/licenses/gpl.html>.
       This  is  free  software:  you  are free to change and redistribute it.
       There is NO WARRANTY, to the extent permitted by law.

SEE ALSO
       tac(1)

       The full documentation for cat is maintained as a Texinfo  manual.   If
       the info and cat programs are properly installed at your site, the com‐
       mand

              info coreutils 'cat invocation'

       should give you access to the complete manual.



GNU coreutils 8.22               November 2020                          CAT(1)
cat(ENDCOMMAND
head(STARTCOMMAND
HEAD(1)                          User Commands                         HEAD(1)



NAME
       head - output the first part of files

SYNOPSIS
       head [OPTION]... [FILE]...

DESCRIPTION
       Print  the  first  10 lines of each FILE to standard output.  With more
       than one FILE, precede each with a header giving the file  name.   With
       no FILE, or when FILE is -, read standard input.

       Mandatory  arguments  to  long  options are mandatory for short options
       too.

       -c, --bytes=[-]K
              print the first K bytes of each  file;  with  the  leading  '-',
              print all but the last K bytes of each file

       -n, --lines=[-]K
              print  the first K lines instead of the first 10; with the lead‐
              ing '-', print all but the last K lines of each file

       -q, --quiet, --silent
              never print headers giving file names

       -v, --verbose
              always print headers giving file names

       --help display this help and exit

       --version
              output version information and exit

       K may have a multiplier suffix: b 512, kB 1000, K 1024, MB 1000*1000, M
       1024*1024,  GB 1000*1000*1000, G 1024*1024*1024, and so on for T, P, E,
       Z, Y.

       GNU  coreutils  online  help:  <http://www.gnu.org/software/coreutils/>
       Report head translation bugs to <http://translationproject.org/team/>

AUTHOR
       Written by David MacKenzie and Jim Meyering.

COPYRIGHT
       Copyright  ©  2013  Free Software Foundation, Inc.  License GPLv3+: GNU
       GPL version 3 or later <http://gnu.org/licenses/gpl.html>.
       This is free software: you are free  to  change  and  redistribute  it.
       There is NO WARRANTY, to the extent permitted by law.

SEE ALSO
       The  full documentation for head is maintained as a Texinfo manual.  If
       the info and head programs are properly installed  at  your  site,  the
       command

              info coreutils 'head invocation'

       should give you access to the complete manual.



GNU coreutils 8.22               November 2020                         HEAD(1)
head(ENDCOMMAND
more(STARTCOMMAND
MORE(1)                          User Commands                         MORE(1)



NAME
       more - file perusal filter for crt viewing

SYNOPSIS
       more [options] file [...]

DESCRIPTION
       more is a filter for paging through text one screenful at a time.  This
       version is especially primitive.  Users  should  realize  that  less(1)
       provides more(1) emulation plus extensive enhancements.

OPTIONS
       Command-line  options are described below.  Options are also taken from
       the environment variable MORE (make sure to precede them  with  a  dash
       (``-'')) but command line options will override them.

       -number
              This option specifies an integer number which is the screen size
              (in lines).

       -d     more will prompt the user with the message "[Press space to con‐
              tinue,  'q' to quit.]" and will display "[Press 'h' for instruc‐
              tions.]" instead of ringing the bell  when  an  illegal  key  is
              pressed.

       -l     more  usually  treats ^L (form feed) as a special character, and
              will pause after any line that contains a  form  feed.   The  -l
              option will prevent this behavior.

       -f     Causes  more  to  count logical, rather than screen lines (i.e.,
              long lines are not folded).

       -p     Do not scroll.  Instead, clear the whole screen and then display
              the  text.  Notice that this option is switched on automatically
              if the executable is named page.

       -c     Do not scroll.  Instead, paint each screen from the top,  clear‐
              ing the remainder of each line as it is displayed.

       -s     Squeeze multiple blank lines into one.

       -u     Suppress underlining.

       +/     The  +/  option  specifies  a  string  that will be searched for
              before each file is displayed.

       +number
              Start at line number.

COMMANDS
       Interactive commands for more are based on vi(1).  Some commands may be
       preceded  by  a decimal number, called k in the descriptions below.  In
       the following descriptions, ^X means control-X.

              h or ?    Help: display a summary of  these  commands.   If  you
                        forget all the other commands, remember this one.

              SPACE     Display  next  k  lines  of text.  Defaults to current
                        screen size.

              z         Display next k lines of  text.   Defaults  to  current
                        screen size.  Argument becomes new default.

              RETURN    Display  next  k lines of text.  Defaults to 1.  Argu‐
                        ment becomes new default.

              d or ^D   Scroll k lines.  Default is current scroll size,  ini‐
                        tially 11.  Argument becomes new default.

              q or Q or INTERRUPT
                        Exit.

              s         Skip forward k lines of text.  Defaults to 1.

              f         Skip forward k screenfuls of text.  Defaults to 1.

              b or ^B   Skip  backwards  k screenfuls of text.  Defaults to 1.
                        Only works with files, not pipes.

              ´         Go to place where previous search started.

              =         Display current line number.

              /pattern  Search  for  kth  occurrence  of  regular  expression.
                        Defaults to 1.

              n         Search  for kth occurrence of last regular expression.
                        Defaults to 1.

              !command or :!command
                        Execute command in a subshell.

              v         Start up an editor at current  line.   The  editor  is
                        taken from the environment variable VISUAL if defined,
                        or EDITOR if VISUAL is not defined, or defaults to  vi
                        if neither VISUAL nor EDITOR is defined.

              ^L        Redraw screen.

              :n        Go to kth next file.  Defaults to 1.

              :P        Go to kth previous file.  Defaults to 1.

              :f        Display current file name and line number.

              .         Repeat previous command.

ENVIRONMENT
       More utilizes the following environment variables, if they exist:

       MORE   This variable may be set with favored options to more.

       SHELL  Current shell in use (normally set by the shell at login time).

       TERM   Specifies  terminal type, used by more to get the terminal char‐
              acteristics necessary to manipulate the screen.

       VISUAL Editor the user is preferring.   Used  when  key  command  v  is
              pressed.

       EDITOR Editor of choise when VISUAL is not specified.

SEE ALSO
       vi(1), less(1)

AUTHORS
       Eric Shienbrood, UC Berkeley
       Modified by Geoff Peck, UCB to add underlining, single spacing
       Modified by John Foderaro, UCB to add -c and MORE environment variable

HISTORY
       The more command appeared in 3.0BSD.  This man page documents more ver‐
       sion 5.19 (Berkeley 6/29/88), which is currently in use  in  the  Linux
       community.   Documentation was produced using several other versions of
       the man page, and extensive inspection of the source code.

AVAILABILITY
       The more command is part of the util-linux  package  and  is  available
       from  Linux  Kernel Archive ⟨ftp://ftp.kernel.org/pub/linux/utils/util-
       linux/⟩.



util-linux                      September 2011                         MORE(1)
more(ENDCOMMAND
